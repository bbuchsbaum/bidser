% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/all_generic.R, R/bids_subject.R
\name{bids_subject}
\alias{bids_subject}
\alias{bids_subject.bids_project}
\title{Access a single subject from a BIDS project}
\usage{
bids_subject(x, subid, ...)

bids_subject.bids_project(x, subid, ...)

bids_subject(x, subid, ...)
}
\arguments{
\item{x}{A \code{bids_project} object.}

\item{subid}{Character string. The subject ID to extract (without the "sub-" prefix).}

\item{...}{Additional arguments (not currently used).}
}
\value{
A list of helper functions for the subject.

A list containing helper functions:
\itemize{
\item{\code{events}:}{Read event files via \code{\link[=read_events]{read_events()}}.}
\item{\code{scans}:}{Retrieve functional scan paths via \code{\link[=func_scans]{func_scans()}}.}
\item{\code{confounds}:}{Read confound tables with \code{\link[=read_confounds]{read_confounds()}}.}
\item{\code{preproc_scans}:}{Retrieve preprocessed scan paths with \code{\link[=preproc_scans]{preproc_scans()}}.}
\item{\code{brain_mask}:}{Create a brain mask via \code{\link[=brain_mask]{brain_mask()}}.}
}

A new \code{bids_project} object containing only the specified subject's data.
Returns NULL if the subject is not found in the project.
}
\description{
\code{bids_subject} returns a lightweight interface with helper functions
for retrieving data associated with one subject.

\code{bids_subject} returns a lightweight facade that exposes convenience
functions to work with all data associated with one subject within a
BIDS project.

This function extracts a single subject's data from a BIDS project, creating
a new BIDS project object containing only that subject's files and metadata.
}
\examples{
\donttest{
tryCatch({
  ds001_path <- get_example_bids_dataset("ds001")
  proj <- bids_project(ds001_path)
  subj <- bids_subject(proj, "01")
  subj$events()
  subj$scans()
  
  # Clean up
  unlink(ds001_path, recursive=TRUE)
}, error = function(e) {
  message("Example requires internet connection: ", e$message)
})
}
\donttest{
tryCatch({
  ds001_path <- get_example_bids_dataset("ds001")
  proj <- bids_project(ds001_path)
  subj <- bids_subject(proj, "01")
  subj$events()
  subj$scans()
  
  # Clean up
  unlink(ds001_path, recursive=TRUE)
}, error = function(e) {
  message("Example requires internet connection: ", e$message)
})
}
\donttest{
# Extract a single subject from a BIDS project
tryCatch({
  ds001_path <- get_example_bids_dataset("ds001")
  proj <- bids_project(ds001_path)
  
  # Extract subject 01
  sub01 <- bids_subject(proj, "01")
  
  # Check subject data
  print(participants(sub01))
  
  # Clean up
  unlink(ds001_path, recursive=TRUE)
}, error = function(e) {
  message("Example requires internet connection: ", e$message)
})
}

}
