[{"path":"https://bbuchsbaum.github.io/bidser/CI-STATUS.html","id":null,"dir":"","previous_headings":"","what":"GitHub Actions Workflows Summary","title":"GitHub Actions Workflows Summary","text":"following CI workflows configured package: ✅ R-CMD-check: Tests Ubuntu/macOS/Windows multiple R versions ✅ test-coverage: Runs tests reports coverage Codecov ✅ lint: Code style checking lintr ✅ pkgdown: Documentation website deployment ✅ render-readme: Auto-updates README.md README.Rmd ✅ pkgcheck: Additional package validation workflows run push/PR main/master branches.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/bidser/CI-STATUS.html","id":"r-cmd-checkyaml","dir":"","previous_headings":"Workflow Details","what":"R-CMD-check.yaml","title":"GitHub Actions Workflows Summary","text":"Platforms: Ubuntu, macOS, Windows R Versions: devel, release, oldrel-1 Purpose: Comprehensive package validation","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CI-STATUS.html","id":"test-coverageyaml","dir":"","previous_headings":"Workflow Details","what":"test-coverage.yaml","title":"GitHub Actions Workflows Summary","text":"Platform: Ubuntu Purpose: Test execution coverage reporting Codecov","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CI-STATUS.html","id":"lintyaml","dir":"","previous_headings":"Workflow Details","what":"lint.yaml","title":"GitHub Actions Workflows Summary","text":"Platform: Ubuntu Purpose: Code style validation using lintr","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CI-STATUS.html","id":"pkgdownyaml","dir":"","previous_headings":"Workflow Details","what":"pkgdown.yaml","title":"GitHub Actions Workflows Summary","text":"Platform: Ubuntu Purpose: Build deploy documentation website","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CI-STATUS.html","id":"render-readmeyaml","dir":"","previous_headings":"Workflow Details","what":"render-readme.yaml","title":"GitHub Actions Workflows Summary","text":"Platform: Ubuntu Trigger: Changes README.Rmd Purpose: Auto-generate README.md","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CI-STATUS.html","id":"pkgcheckyaml","dir":"","previous_headings":"Workflow Details","what":"pkgcheck.yaml","title":"GitHub Actions Workflows Summary","text":"Platform: Ubuntu Purpose: rOpenSci package validation tools","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md","title":"CLAUDE.md","text":"file provides guidance Claude Code (claude.ai/code) working code repository.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/bidser/CLAUDE.html","id":"building-and-installation","dir":"","previous_headings":"Development Commands","what":"Building and Installation","title":"CLAUDE.md","text":"","code":"# Install package dependencies devtools::install_deps()  # Build and install the package devtools::install()  # Build and check the package devtools::check()  # Run R CMD check (comprehensive) devtools::check(cran = TRUE)"},{"path":"https://bbuchsbaum.github.io/bidser/CLAUDE.html","id":"testing","dir":"","previous_headings":"Development Commands","what":"Testing","title":"CLAUDE.md","text":"","code":"# Run all tests devtools::test()  # Run tests with coverage covr::package_coverage()  # Run a specific test file testthat::test_file(\"tests/testthat/test_bids_subject.R\")  # Run tests matching a pattern devtools::test(filter = \"mock_bids\")"},{"path":"https://bbuchsbaum.github.io/bidser/CLAUDE.html","id":"documentation","dir":"","previous_headings":"Development Commands","what":"Documentation","title":"CLAUDE.md","text":"","code":"# Generate documentation from roxygen comments devtools::document()  # Build package website pkgdown::build_site()  # Check examples in documentation devtools::run_examples()"},{"path":"https://bbuchsbaum.github.io/bidser/CLAUDE.html","id":"architecture-overview","dir":"","previous_headings":"","what":"Architecture Overview","title":"CLAUDE.md","text":"bidser R package working Brain Imaging Data Structure (BIDS) formatted neuroimaging datasets. provides tools reading, validating, querying BIDS-compliant projects, including support fMRIPrep derivatives.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CLAUDE.html","id":"core-components","dir":"","previous_headings":"Architecture Overview","what":"Core Components","title":"CLAUDE.md","text":"Uses Combin8R parser combinator library parse BIDS filenames Parsers extract metadata (subject, session, task, run, etc.) standardized BIDS naming conventions Key parsers: bids_parser(), func_parser(), anat_parser(), fmriprep_func_parser(), fmriprep_anat_parser() Main entry point: bids_project() creates project object BIDS directory Scans directory structure builds hierarchical data.tree representation Supports raw BIDS data fMRIPrep derivatives S3 class methods querying extracting data Defines S3 generics common operations across BIDS objects Key generics: parse(), encode(), sessions(), tasks(), participants(), func_scans(), event_files(), confound_files(), read_events(), read_confounds() Tools creating mock/test BIDS datasets Useful package testing demonstrating functionality Functions creating visual summaries BIDS datasets Heatmaps, completeness plots, task distributions","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CLAUDE.html","id":"key-design-patterns","dir":"","previous_headings":"Architecture Overview","what":"Key Design Patterns","title":"CLAUDE.md","text":"S3 Object System: Package uses S3 classes methods extensively Parser Combinators: Filename parsing uses functional programming approach Combin8R Tree Structure: BIDS hierarchy represented using data.tree package Tibble-based Output: data returns use tibbles tidyverse Regex Filtering: query functions accept regex patterns flexible filtering","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CLAUDE.html","id":"dependencies","dir":"","previous_headings":"Architecture Overview","what":"Dependencies","title":"CLAUDE.md","text":"Critical dependencies: - Combin8R: Parser combinator library (GitHub: SWotherspoon/Combin8R) - neuroim2: Neuroimaging data structures (GitHub: bbuchsbaum/neuroim2) - data.tree: Hierarchical data representation - Tidyverse packages: dplyr, tidyr, purrr, readr, tibble","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CLAUDE.html","id":"common-workflows","dir":"","previous_headings":"Architecture Overview","what":"Common Workflows","title":"CLAUDE.md","text":"Loading BIDS project: Querying data: Working preprocessed data:","code":"proj <- bids_project(\"/path/to/bids/dataset\", fmriprep = TRUE) # Get functional scans for subject 01 func_scans(proj, subid = \"01\")  # Read event files for a specific task read_events(proj, task = \"rest\") # Get preprocessed scans preproc_scans(proj, space = \"MNI152NLin2009cAsym\")  # Read confound files read_confounds(proj, subid = \"01\", task = \"rest\")"},{"path":"https://bbuchsbaum.github.io/bidser/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to bidser","title":"Contributing to bidser","text":"Thank interest contributing bidser! document outlines development workflow continuous integration setup.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CONTRIBUTING.html","id":"development-workflow","dir":"","previous_headings":"","what":"Development Workflow","title":"Contributing to bidser","text":"Fork repository create new branch feature/fix Make changes following existing code style Add tests new functionality Update documentation needed Submit pull request clear description","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CONTRIBUTING.html","id":"continuous-integration","dir":"","previous_headings":"","what":"Continuous Integration","title":"Contributing to bidser","text":"package uses GitHub Actions continuous integration following workflows:","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CONTRIBUTING.html","id":"core-workflows","dir":"","previous_headings":"Continuous Integration","what":"Core Workflows","title":"Contributing to bidser","text":"R-CMD-check.yaml: Comprehensive package checking across multiple operating systems (Ubuntu, macOS, Windows) R versions (devel, release, oldrel-1) test-coverage.yaml: Runs test suite uploads coverage reports Codecov lint.yaml: Code style checking using lintr package","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CONTRIBUTING.html","id":"documentation-workflows","dir":"","previous_headings":"Continuous Integration","what":"Documentation Workflows","title":"Contributing to bidser","text":"pkgdown.yaml: Builds deploys package website GitHub Pages render-readme.yaml: Automatically updates README.md README.Rmd changes","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CONTRIBUTING.html","id":"quality-assurance","dir":"","previous_headings":"Continuous Integration","what":"Quality Assurance","title":"Contributing to bidser","text":"pkgcheck.yaml: Additional package validation using rOpenSci tools","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"","what":"Code Style","title":"Contributing to bidser","text":"use lintr code style checking (configured .lintr) Line length limit: 120 characters Follow existing naming conventions codebase","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CONTRIBUTING.html","id":"testing","dir":"","previous_headings":"","what":"Testing","title":"Contributing to bidser","text":"new functions corresponding tests tests/testthat/ Tests run automatically platforms via GitHub Actions Aim good test coverage (current coverage tracked via Codecov)","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CONTRIBUTING.html","id":"local-development","dir":"","previous_headings":"","what":"Local Development","title":"Contributing to bidser","text":"","code":"# Install development dependencies devtools::install_dev_deps()  # Run tests locally devtools::test()  # Check package devtools::check()  # Check code style lintr::lint_package()"},{"path":"https://bbuchsbaum.github.io/bidser/CONTRIBUTING.html","id":"example-data","dir":"","previous_headings":"","what":"Example Data","title":"Contributing to bidser","text":"package uses BIDS example datasets testing documentation. cached improve performance: Don’t call unlink() dataset paths examples Use get_example_bids_dataset() intelligent caching Clear cache needed clear_example_bids_cache()","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CONTRIBUTING.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Contributing to bidser","text":"functions must documented roxygen2 Include @examples exported functions Use \\donttest{} examples requiring internet Vignettes demonstrate real-world usage","code":""},{"path":"https://bbuchsbaum.github.io/bidser/CONTRIBUTING.html","id":"questions","dir":"","previous_headings":"","what":"Questions?","title":"Contributing to bidser","text":"Feel free open issue questions contributing!","code":""},{"path":"https://bbuchsbaum.github.io/bidser/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023-2024 Bradley Buchsbaum Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/articles/quickstart.html","id":"introduction-to-bidser","dir":"Articles","previous_headings":"","what":"Introduction to bidser","title":"Getting Started with bidser","text":"bidser R package designed working neuroimaging data organized according Brain Imaging Data Structure (BIDS) standard. BIDS specification describes organize name neuroimaging behavioral data, making datasets accessible, shareable, easier analyze.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/articles/quickstart.html","id":"what-is-bids","dir":"Articles","previous_headings":"Introduction to bidser","what":"What is BIDS?","title":"Getting Started with bidser","text":"BIDS organizes data hierarchical folder structure standardized naming conventions: Subjects identified folders named sub-XX Sessions (optional) identified folders named ses-XX Data types organized modality-specific folders (anat, func, dwi, etc.) Files follow specific naming patterns encode metadata (subject, session, task, run, etc.)","code":""},{"path":"https://bbuchsbaum.github.io/bidser/articles/quickstart.html","id":"what-does-bidser-do","dir":"Articles","previous_headings":"Introduction to bidser","what":"What does bidser do?","title":"Getting Started with bidser","text":"bidser provides tools : Query filter files based BIDS metadata (subject, task, run, etc.) Read event files describe experimental paradigms Work fMRIPrep derivatives preprocessed data Navigate complex BIDS hierarchies without manually constructing file paths Let’s explore capabilities using real BIDS dataset.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/articles/quickstart.html","id":"loading-a-bids-dataset","dir":"Articles","previous_headings":"","what":"Loading a BIDS Dataset","title":"Getting Started with bidser","text":"’ll use ds001 dataset BIDS examples, contains data “Balloon Analog Risk Task” experiment 16 subjects. bids_project object provides high-level interface dataset. can see contains 16 subjects anatomical functional data.","code":"#>  #> Attaching package: 'bidser' #> The following object is masked from 'package:base': #>  #>     parse library(bidser) library(tibble) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(gluedown)  # Download example BIDS dataset tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)      print(proj) }, error = function(e) {   message(\"This vignette requires an internet connection to download example data.\")   message(\"Error: \", e$message)   knitr::knit_exit() }) #> BIDS Project Summary  #> Project Name:  bids_example_ds001  #> Participants (n):  16  #> Tasks:  balloonanalogrisktask  #> Image Types:  anat, func  #> Modalities:  (none)  #> Keys:  folder, kind, relative_path, subid, suffix, type, run, task"},{"path":[]},{"path":"https://bbuchsbaum.github.io/bidser/articles/quickstart.html","id":"dataset-structure","dir":"Articles","previous_headings":"Basic Dataset Queries","what":"Dataset Structure","title":"Getting Started with bidser","text":"Let’s explore basic structure dataset:","code":"# Check if the dataset has multiple sessions per subject sessions(proj) #> NULL  # Get all participant IDs participants(proj) #>  [1] \"01\" \"02\" \"03\" \"04\" \"05\" \"06\" \"07\" \"08\" \"09\" \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" #> [16] \"16\"  # What tasks are included? tasks(proj) #> [1] \"balloonanalogrisktask\"  # Get a summary of the dataset bids_summary(proj) #> $n_subjects #> [1] 16 #>  #> $n_sessions #> NULL #>  #> $tasks #> # A tibble: 1 × 2 #>   task                  n_runs #>   <chr>                  <int> #> 1 balloonanalogrisktask      3 #>  #> $total_runs #> [1] 3"},{"path":"https://bbuchsbaum.github.io/bidser/articles/quickstart.html","id":"finding-files-by-type","dir":"Articles","previous_headings":"Basic Dataset Queries","what":"Finding Files by Type","title":"Getting Started with bidser","text":"bidser provides several ways find files. Let’s start common neuroimaging file types:","code":"# Find all anatomical T1-weighted images t1w_files <- search_files(proj, regex = \"T1w\\\\.nii\", full_path = FALSE) print(paste(\"Found\", length(t1w_files), \"T1w images\")) #> [1] \"Found 16 T1w images\" head(t1w_files) #> [1] \"sub-01/anat/sub-01_T1w.nii.gz\" \"sub-02/anat/sub-02_T1w.nii.gz\" #> [3] \"sub-03/anat/sub-03_T1w.nii.gz\" \"sub-04/anat/sub-04_T1w.nii.gz\" #> [5] \"sub-05/anat/sub-05_T1w.nii.gz\" \"sub-06/anat/sub-06_T1w.nii.gz\"  # Find all functional BOLD scans bold_files <- func_scans(proj, full_path = FALSE) print(paste(\"Found\", length(bold_files), \"functional scans\")) #> [1] \"Found 48 functional scans\" head(bold_files) #> [1] \"sub-01/func/sub-01_task-balloonanalogrisktask_run-01_bold.nii.gz\" #> [2] \"sub-01/func/sub-01_task-balloonanalogrisktask_run-02_bold.nii.gz\" #> [3] \"sub-01/func/sub-01_task-balloonanalogrisktask_run-03_bold.nii.gz\" #> [4] \"sub-02/func/sub-02_task-balloonanalogrisktask_run-01_bold.nii.gz\" #> [5] \"sub-02/func/sub-02_task-balloonanalogrisktask_run-02_bold.nii.gz\" #> [6] \"sub-02/func/sub-02_task-balloonanalogrisktask_run-03_bold.nii.gz\""},{"path":"https://bbuchsbaum.github.io/bidser/articles/quickstart.html","id":"filtering-by-subject-and-task","dir":"Articles","previous_headings":"Basic Dataset Queries","what":"Filtering by Subject and Task","title":"Getting Started with bidser","text":"One bidser’s key strengths filtering data BIDS metadata:","code":"# Get functional scans for specific subjects sub01_scans <- func_scans(proj, subid = \"01\") sub02_scans <- func_scans(proj, subid = \"02\")  print(paste(\"Subject 01 has\", length(sub01_scans), \"scans\")) #> [1] \"Subject 01 has 3 scans\" print(paste(\"Subject 02 has\", length(sub02_scans), \"scans\")) #> [1] \"Subject 02 has 3 scans\"  # Filter by task (ds001 only has one task, but this shows the syntax) task_scans <- func_scans(proj, task = \"balloonanalogrisktask\") print(paste(\"Found\", length(task_scans), \"scans for the balloon task\")) #> [1] \"Found 48 scans for the balloon task\"  # Combine filters: specific subject AND task sub01_task_scans <- func_scans(proj, subid = \"01\", task = \"balloonanalogrisktask\") print(paste(\"Subject 01 has\", length(sub01_task_scans), \"balloon task scans\")) #> [1] \"Subject 01 has 3 balloon task scans\""},{"path":"https://bbuchsbaum.github.io/bidser/articles/quickstart.html","id":"working-with-multiple-subjects","dir":"Articles","previous_headings":"Basic Dataset Queries","what":"Working with Multiple Subjects","title":"Getting Started with bidser","text":"can use regular expressions select multiple subjects :","code":"# Get scans for subjects 01, 02, and 03 first_three_scans <- func_scans(proj, subid = \"0[123]\") print(paste(\"First 3 subjects have\", length(first_three_scans), \"scans total\")) #> [1] \"First 3 subjects have 9 scans total\"  # Get scans for all subjects (equivalent to default) all_scans <- func_scans(proj, subid = \".*\") print(paste(\"All subjects have\", length(all_scans), \"scans total\")) #> [1] \"All subjects have 48 scans total\""},{"path":"https://bbuchsbaum.github.io/bidser/articles/quickstart.html","id":"working-with-event-files","dir":"Articles","previous_headings":"","what":"Working with Event Files","title":"Getting Started with bidser","text":"Event files describe experimental paradigm - stimuli presented, responses occurred, etc. crucial task-based fMRI analysis. Let’s explore event data structure:","code":"# Find all event files event_file_paths <- event_files(proj) print(paste(\"Found\", length(event_file_paths), \"event files\")) #> [1] \"Found 48 event files\"  # Read event data into a nested data frame events_data <- suppressMessages(read_events(proj)) head(events_data) #> # A tibble: 6 × 5 #> # Groups:   .task, .session, .run, .subid [6] #>   .subid .session .run  .task                 data               #>   <chr>  <chr>    <chr> <chr>                 <list>             #> 1 01     NA       01    balloonanalogrisktask <tibble [158 × 2]> #> 2 01     NA       02    balloonanalogrisktask <tibble [156 × 2]> #> 3 01     NA       03    balloonanalogrisktask <tibble [149 × 2]> #> 4 02     NA       01    balloonanalogrisktask <tibble [185 × 2]> #> 5 02     NA       02    balloonanalogrisktask <tibble [184 × 2]> #> 6 02     NA       03    balloonanalogrisktask <tibble [186 × 2]> # Look at events for the first subject library(tidyr)  first_subject_events <- suppressMessages(   events_data %>%      filter(.subid == \"01\") %>%      unnest(cols = c(data)) )  print(\"Event structure for subject 01:\") #> [1] \"Event structure for subject 01:\" print(head(first_subject_events)) #> # A tibble: 6 × 6 #> # Groups:   .task, .session, .run, .subid [1] #>   .subid .session .run  .task                 onset\\tduration\\ttrial_typ…¹ .file #>   <chr>  <chr>    <chr> <chr>                 <chr>                        <chr> #> 1 01     NA       01    balloonanalogrisktask \"0.061\\t0.772\\tpumps_demean… /tmp… #> 2 01     NA       01    balloonanalogrisktask \"4.958\\t0.772\\tpumps_demean… /tmp… #> 3 01     NA       01    balloonanalogrisktask \"7.179\\t0.772\\tpumps_demean… /tmp… #> 4 01     NA       01    balloonanalogrisktask \"10.416\\t0.772\\tpumps_demea… /tmp… #> 5 01     NA       01    balloonanalogrisktask \"13.419\\t0.772\\tpumps_demea… /tmp… #> 6 01     NA       01    balloonanalogrisktask \"16.754\\t0.772\\texplode_dem… /tmp… #> # ℹ abbreviated name: #> #   ¹​`onset\\tduration\\ttrial_type\\tcash_demean\\tcontrol_pumps_demean\\texplode_demean\\tpumps_demean\\tresponse_time`  # What columns are in the event data? print(\"Event file columns:\") #> [1] \"Event file columns:\" print(names(first_subject_events)) #> [1] \".subid\"                                                                                                      #> [2] \".session\"                                                                                                    #> [3] \".run\"                                                                                                        #> [4] \".task\"                                                                                                       #> [5] \"onset\\tduration\\ttrial_type\\tcash_demean\\tcontrol_pumps_demean\\texplode_demean\\tpumps_demean\\tresponse_time\" #> [6] \".file\""},{"path":"https://bbuchsbaum.github.io/bidser/articles/quickstart.html","id":"analyzing-event-data","dir":"Articles","previous_headings":"Working with Event Files","what":"Analyzing Event Data","title":"Getting Started with bidser","text":"Let’s basic exploration experimental design:","code":"# How many trials per subject? trial_counts <- suppressMessages(   events_data %>%     unnest(cols = c(data)) %>%     group_by(.subid) %>%     summarise(n_trials = n(), .groups = \"drop\") )  print(\"Trials per subject:\") #> [1] \"Trials per subject:\" print(trial_counts) #> # A tibble: 16 × 2 #>    .subid n_trials #>    <chr>     <int> #>  1 01          463 #>  2 02          555 #>  3 03          494 #>  4 04          510 #>  5 05          419 #>  6 06          536 #>  7 07          492 #>  8 08          494 #>  9 09          497 #> 10 10          521 #> 11 11          471 #> 12 12          453 #> 13 13          485 #> 14 14          503 #> 15 15          411 #> 16 16          419  # What trial types are there? if (\"trial_type\" %in% names(first_subject_events)) {   trial_types <- first_subject_events %>%     count(trial_type, name = \"frequency\")   print(\"Trial types in the experiment:\")   print(trial_types) }"},{"path":"https://bbuchsbaum.github.io/bidser/articles/quickstart.html","id":"working-with-individual-subjects","dir":"Articles","previous_headings":"","what":"Working with Individual Subjects","title":"Getting Started with bidser","text":"bids_subject() function provides convenient interface working data single subject. returns lightweight object helper functions automatically filter data subject. approach particularly useful ’re subject-level analyses: subject interface makes easy write analysis pipelines iterate subjects without manually constructing filters:","code":"# Create a subject-specific interface for subject 01 subject_01 <- bids_subject(proj, \"01\")  # The subject object provides several helper functions: # Get all functional scans for this subject sub01_scans <- subject_01$scans() print(paste(\"Subject 01 has\", length(sub01_scans), \"functional scans\")) #> [1] \"Subject 01 has 3 functional scans\"  # Get event files for this subject sub01_events <- subject_01$events() #> Rows: 158 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset duration    trial_type  cash_demean control_pumps_demean    explode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 156 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset duration    trial_type  cash_demean control_pumps_demean    explode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset duration    trial_type  cash_demean control_pumps_demean    explode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. print(paste(\"Subject 01 has\", length(sub01_events), \"event files\")) #> [1] \"Subject 01 has 5 event files\"  # Read event data for this subject sub01_event_data <- suppressMessages(subject_01$events()) print(\"Event data structure for subject 01:\") #> [1] \"Event data structure for subject 01:\" print(sub01_event_data) #> # A tibble: 3 × 5 #> # Groups:   .task, .session, .run, .subid [3] #>   .subid .session .run  .task                 data               #>   <chr>  <chr>    <chr> <chr>                 <list>             #> 1 01     NA       01    balloonanalogrisktask <tibble [158 × 2]> #> 2 01     NA       02    balloonanalogrisktask <tibble [156 × 2]> #> 3 01     NA       03    balloonanalogrisktask <tibble [149 × 2]> # Example: Analyze data for multiple subjects using the subject interface subjects_to_analyze <- c(\"01\", \"02\", \"03\")  for (subj_id in subjects_to_analyze) {   # Create subject interface   subj <- bids_subject(proj, subj_id)      # Get subject-specific data   scans <- subj$scans()   events <- subj$events()      cat(sprintf(\"Subject %s: %d scans, %d event files\\n\",                subj_id, length(scans), length(events))) } #> Rows: 158 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset duration    trial_type  cash_demean control_pumps_demean    explode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 156 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset duration    trial_type  cash_demean control_pumps_demean    explode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset duration    trial_type  cash_demean control_pumps_demean    explode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Subject 01: 3 scans, 5 event files #> Rows: 185 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset duration    trial_type  cash_demean control_pumps_demean    explode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 184 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset duration    trial_type  cash_demean control_pumps_demean    explode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 186 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset duration    trial_type  cash_demean control_pumps_demean    explode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Subject 02: 3 scans, 5 event files #> Rows: 150 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset duration    trial_type  cash_demean control_pumps_demean    explode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 169 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset duration    trial_type  cash_demean control_pumps_demean    explode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 175 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset duration    trial_type  cash_demean control_pumps_demean    explode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Subject 03: 3 scans, 5 event files # Compare trial counts across subjects using the subject interface subject_trial_summary <- tibble(   subject = character(),   n_trials = numeric(),   n_scans = numeric() )  for (subj_id in participants(proj)[1:3]) {  # Just first 3 subjects for demo   subj <- bids_subject(proj, subj_id)      # Count trials   event_data <- suppressMessages(subj$events())   n_trials <- if (nrow(event_data) > 0) {     event_data %>%        unnest(cols = c(data)) %>%        nrow()   } else {     0   }      # Count scans   n_scans <- length(subj$scans())      # Add to summary   subject_trial_summary <- bind_rows(     subject_trial_summary,     tibble(subject = subj_id, n_trials = n_trials, n_scans = n_scans)   ) }  print(\"Trial and scan summary by subject:\") #> [1] \"Trial and scan summary by subject:\" print(subject_trial_summary) #> # A tibble: 3 × 3 #>   subject n_trials n_scans #>   <chr>      <dbl>   <dbl> #> 1 01           463       3 #> 2 02           555       3 #> 3 03           494       3"},{"path":[]},{"path":"https://bbuchsbaum.github.io/bidser/articles/quickstart.html","id":"custom-file-searches","dir":"Articles","previous_headings":"Advanced Querying","what":"Custom File Searches","title":"Getting Started with bidser","text":"search_files() function flexible custom queries:","code":"# Find all JSON sidecar files json_files <- search_files(proj, regex = \"\\\\.json$\") print(paste(\"Found\", length(json_files), \"JSON files\")) #> [1] \"Found 0 JSON files\"  # Find files for specific runs run1_files <- search_files(proj, regex = \"bold\", run = \"01\") print(paste(\"Found\", length(run1_files), \"files from run 01\")) #> [1] \"Found 16 files from run 01\"  # Complex pattern matching # Find T1w files for subjects 01-05 t1w_subset <- search_files(proj, regex = \"T1w\", subid = \"0[1-5]\") print(paste(\"Found\", length(t1w_subset), \"T1w files for subjects 01-05\")) #> [1] \"Found 5 T1w files for subjects 01-05\""},{"path":"https://bbuchsbaum.github.io/bidser/articles/quickstart.html","id":"getting-full-file-paths","dir":"Articles","previous_headings":"Advanced Querying","what":"Getting Full File Paths","title":"Getting Started with bidser","text":"Sometimes need complete file paths analysis:","code":"# Get full paths to functional scans for analysis full_paths <- func_scans(proj, subid = \"01\", full_path = TRUE) print(\"Full paths to subject 01's functional scans:\") #> [1] \"Full paths to subject 01's functional scans:\" print(full_paths) #> [1] \"/tmp/Rtmpyxv1Eb/bids_example_ds001/sub-01/func/sub-01_task-balloonanalogrisktask_run-01_bold.nii.gz\" #> [2] \"/tmp/Rtmpyxv1Eb/bids_example_ds001/sub-01/func/sub-01_task-balloonanalogrisktask_run-02_bold.nii.gz\" #> [3] \"/tmp/Rtmpyxv1Eb/bids_example_ds001/sub-01/func/sub-01_task-balloonanalogrisktask_run-03_bold.nii.gz\"  # Check that files actually exist if (length(full_paths) > 0) {   files_exist <- file.exists(full_paths)   print(paste(\"All files exist:\", all(files_exist))) } #> [1] \"All files exist: TRUE\""},{"path":"https://bbuchsbaum.github.io/bidser/articles/quickstart.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Getting Started with bidser","text":"quickstart covered basic functionality bidser querying BIDS datasets. advanced usage, see: fMRIPrep integration: Working preprocessed derivatives Data loading: Reading neuroimaging data neurobase RNifti Confound regression: Using physiological motion regressors Group analysis: Combining data across subjects efficiently","code":""},{"path":"https://bbuchsbaum.github.io/bidser/articles/quickstart.html","id":"reading-files-produced-by-fmriprep","dir":"Articles","previous_headings":"","what":"Reading files produced by FMRIPrep","title":"Getting Started with bidser","text":"processed dataset FMRIPrep, bidser can used read many resultant derivative files. project FMRIPrep derivatives folder, can read BIDS hierarchy plus derivatives follows:","code":"# Try to get a derivatives dataset - note this may not be available tryCatch({   # Some BIDS examples may have derivatives, or we can demonstrate with empty structure   deriv_path <- get_example_bids_dataset(\"ds000001-fmriprep\")   proj_deriv <- bids_project(deriv_path, fmriprep=TRUE)      print(proj_deriv)      # Now we can access various derivative files with convenience functions.   # For example, to read in \"preproc\" scans we can use the `preproc_scans` function.   pscans <- preproc_scans(proj_deriv)   if (!is.null(pscans) && length(pscans) > 0) {     print(head(as.character(pscans)))   } else {     message(\"No preprocessed scans found in this example dataset\")   }      # Clean up derivatives dataset   unlink(deriv_path, recursive=TRUE)    }, error = function(e) {   message(\"Derivatives example not available: \", e$message)   message(\"This is normal - not all BIDS examples include fMRIPrep derivatives.\") }) #> Derivatives example not available: participants.tsv is missing #> This is normal - not all BIDS examples include fMRIPrep derivatives."},{"path":"https://bbuchsbaum.github.io/bidser/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bradley Buchsbaum. Author, maintainer.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Buchsbaum B (2025). bidser: Work BIDS Projects. R package version 0.0.0.9000, https://bbuchsbaum.github.io/bidser/.","code":"@Manual{,   title = {bidser: Work with BIDS Projects},   author = {Bradley Buchsbaum},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://bbuchsbaum.github.io/bidser/}, }"},{"path":"https://bbuchsbaum.github.io/bidser/bidser_cheatsheet.html","id":"micro-dsl-v26--output-format","dir":"","previous_headings":"","what":"Micro-DSL (v2.6) & Output Format","title":"bidser","text":"output must Pure Markdown implies structure defined Micro-DSL. output EBNF token names (e.g., H1_TOKEN). Generate actual Markdown (e.g., # Title, @f my_func(...)). 1. Markup Tokens (Implicitly Handled Markdown): H1 = # text H2 = ## text NL = Newline (use sparingly, primarily end logical entries separate blocks) HR = --- (use separate major logical groups within section, sections) Bul = - (dash + space general bullets Header/Legend/Deps) IndBul= - (two spaces + dash + space indented Desc lines @sigil entry) 2. DSL Sigils: @f = Function @d = Data object (e.g., data()) @g = S4/S3 Generic @m = S4/S3 Method (class dispatch) @c = R6/R7 constructor (present) 3. DSL Symbols: | = Separates multiple function names (e.g., name1|name2) [...] = Used : * Constructor variants: ConstructorName[VariantA|VariantB] * Method dispatch classes: methodName[ClassA|ClassB] (...) = Parameter list entry signature. param? = Optional parameter. param?=val= Optional parameter default value. | = Separates signature short description (params name params). -> = Separates short description return type. Omit return value (side-effect). ! = Prefix inline notes (e.g., !dep, !note: text). space ! note keyword. 4. Document Skeleton: Legend? (H2 “Legend:” + type abbreviation table) Header (H1 PackageName; optional H2 “Core Purpose:”, H2 “Key Objects & Concepts:”) Sections+ (H2 1. Title; H2 Title (unnumbered ok); optional H3 “Usage:”) Entries* (@sigil lines + optional indented bullets) Deps? (H2 “Key R Dependencies:”) 5. Entry Line Structure: @sigil name(|name)*[variant|ClassA|ClassB]? (alias alt1,alt2)? (param1?=val, param2?, ...)? | Short, pithy description -> ReturnTypeAbbr !note_type: Optional note text * Rules Entry Line: * Omit () parameters. * Omit -> ReturnTypeAbbr function return value (side-effect ). * Bundle identical signatures using name1|name2. * Use ConstructorName[VariantA|VariantB] constructor subtypes. * Use methodName[DispatchClassA|DispatchClassB] S4/S3 methods. * Notes (!notetype: text !notetype) optional postfixes. Ensure leading space (e.g., !ok ! ok). * Truncate parameter list ... exceeds 8 parameters (e.g., (param1, param2, ..., param8, ...)). * Example grouping aliases optional params: @f read_csv|read_tsv (file, col_types?=\"auto\", ...) | Parse delimited file -> tib 6. Indented Description Bullets (Desc lines Entry): * Format: - param_name : type_abbr (constants: val1, \"val2\" | key_funcs: fnA, fnB)? Brief, essential clarification. * Include (constants: ...) params take small, fixed set string literals. * Include (key_funcs: ...) params expect specific functions package input. * include adding significant clarity beyond signature. Omit common/obvious parameters (e.g., x, ...) standard defaults (e.g., drop=TRUE). * Entry already fits ≤ 110 characters, add Desc lines unless prevent ambiguity. * Can also plain text general notes: - General descriptive point. 7. Type Abbreviations: * Use short (1-4 letter) type abbreviations (e.g., NS NeuroSpace, iv integer vector, chr character, log logical, mat matrix, obj generic S4/R6 object). * Reuse type abbreviations whenever identical across entries; invent synonyms (e.g., use int consistently, int, intv, iv interchangeably). 7. Type Abbreviations (deprecated – see next subsection): * Use short (1-4 char) codes, reusing consistently (e.g., int intv). * Built-codes: int, dbl, num, chr, lgl, lst, vec, df, tib, tbl, mat, arr, fn, env, obj, NS * Provide ## Legend: block introducing abbreviations beyond list. ## Compression Heuristics & Content Selection: 1. Focus: Public, user-facing API. Omit internal helpers, unexported symbols, direct S4 slot accessors (like slotNames methods just return slot value ’s already clear getter). Include symbols present NAMESPACE export list. 2. Grouping: * Group trivial getters functions identical signatures purpose using name1|name2. * Group constructors identical fields different return subtypes using ConstructorName[VariantA|VariantB]. * Group S3/S4 methods identical implementations/docs using methodName[ClassA|ClassB]. 3. Methods: Define generics @g. Emit methods (@m) behavior, parameters, return type significantly differ generic, explicitly list key supported classes. 4. Omissions: Skip indented parameter descriptions (Desc lines) obvious defaults (e.g., drop=TRUE, smooth=FALSE) common arguments like x ... unless package-specific meaning. cheatsheet full documentation. 5. Notes: Use ! notes sparingly critical info (e.g., !dep, !imp, !retlist, !side). 6. Re-exports: Skip functions generics re-exported packages (e.g., dplyr::filter re-exported, list ). ## Output Contract: * Pure Markdown . Adhere strictly Micro-DSL v2.6. * commentary, intro/outro paragraphs, code fences unless part CODE_BLOCK_TOKEN within BlockContent (rarely needed cheatsheets). * line violates DSL, regenerate fully compliant—prose explanations. * Generation stops first line begins second # H1 depth (e.g., \\\\n# used stop sequence). * Use single blank line separate Entry blocks aids readability, avoid excessive blank lines. Use --- (HR_TOKEN) separate major thematic groups within section end sections. * parens/brackets/pipes must balanced. ## Self-Check (Mental Step - Crucial): finalizing, review output critical checks: 1. every content line belong defined DSL structure (Header, Legend, Section, Entry, Desc, Deps, Block bullet)? 2. DSL syntax Entry lines (sigils, names, params, |, ->, !) correctly used? bare -> tokens. 3. (reserved) 4. abbreviation built-list, defined ## Legend:? 5. omitted non-essential details internal functions?","code":""},{"path":"https://bbuchsbaum.github.io/bidser/bidser_cheatsheet.html","id":"few-shot-exemplar","dir":"","previous_headings":"","what":"Few-shot Exemplar","title":"bidser","text":"","code":"# dummyPkg ## Legend: - int : integer - chr : character ## 1. Core Functions @f add (x, y) | Sum two ints -> int"},{"path":"https://bbuchsbaum.github.io/bidser/bidser_cheatsheet.html","id":"formal-grammar-v26-micro-ebnf","dir":"","previous_headings":"","what":"Formal Grammar “v2.6 Micro-EBNF”","title":"bidser","text":"Cheatsheet ::= Header Legend? Section+ Deps? Legend ::= H2_TOKEN TEXT_CONTENT NEWLINE_TOKEN Block Header ::= H1_TOKEN TEXT_CONTENT NEWLINE_TOKEN+ (H2Section) H2Section ::= H2_TOKEN TEXT_CONTENT NEWLINE_TOKEN Block Section ::= H2_TOKEN (NUMBER_TOKEN PERIOD_TOKEN)? TEXT_CONTENT NEWLINE_TOKEN UsageBlock? Entry+ HR_TOKEN? UsageBlock ::= H3_TOKEN “Usage:” NEWLINE_TOKEN Block Entry ::= Sigil_TOKEN EntryIdent ParamList? Bar_TOKEN TEXT_CONTENT ArrowReturn Note? NEWLINE_TOKEN Desc Sigil_TOKEN ::= AT_F_TOKEN | AT_D_TOKEN | AT_G_TOKEN | AT_M_TOKEN // Lexer provides @f, @d, @g, @m EntryIdent ::= IdentGroup MethodOrVariantClass? AliasSpec? IdentGroup ::= IDENT_TOKEN (“|” IDENT_TOKEN)* // “foo|bar” MethodOrVariantClass ::= LBRACKET_TOKEN IDENT_TOKEN (PIPE_TOKEN IDENT_TOKEN)* RBRACKET_TOKEN // “[ClassA|ClassB]” “[variantA|variantB]” AliasSpec ::= LPAREN_TOKEN ALIAS_KEYWORD_TOKEN IDENT_TOKEN (COMMA_TOKEN IDENT_TOKEN)* RPAREN_TOKEN // “(alias alt1, alt2)” ParamList ::= LPAREN_TOKEN Param (COMMA_TOKEN Param)* RPAREN_TOKEN Param ::= IDENT_TOKEN (EQUALS_TOKEN DefaultValue)? OPTIONAL_MARKER_TOKEN? DefaultValue ::= LITERAL_TOKEN | IDENT_TOKEN ArrowReturn ::= (ARROW_TOKEN IDENT_TOKEN)? Note ::= EXCLAMATION_TOKEN NOTETYPE_TOKEN (COLON_TOKEN TEXT_CONTENT)? NEWLINE_TOKEN? Desc ::= INDENT_TOKEN BULLET_MARKER_TOKEN (ParamDesc | TEXT_CONTENT) NEWLINE_TOKEN ParamDesc ::= IDENT_TOKEN COLON_TOKEN TYPE_ABBR_TOKEN ParamExtra? TEXT_CONTENT? ParamExtra ::= LPAREN_TOKEN (ConstantsSpec | KeyFuncsSpec) RPAREN_TOKEN ConstantsSpec ::= “constants:” (IDENT_TOKEN|LITERAL_TOKEN) (COMMA_TOKEN (IDENT_TOKEN|LITERAL_TOKEN)) KeyFuncsSpec ::= “key_funcs:” IDENT_TOKEN (COMMA_TOKEN IDENT_TOKEN) Deps ::= H2_TOKEN “Key R Dependencies:” NEWLINE_TOKEN Block Block ::= (Bullet | TEXT_CONTENT | CODE_BLOCK_TOKEN)* (NEWLINE_TOKEN | EOF_TOKEN) Bullet ::= BULLET_MARKER_TOKEN TEXT_CONTENT NEWLINE_TOKEN /* — LEXER-IMPLIED TOKENS (Illustrative) — previous tokens v2.4, plus: AT_G_TOKEN, AT_M_TOKEN // @g, @m // lexer provides LBRACKET_TOKEN, IDENT_TOKEN, PIPE_TOKEN, RBRACKET_TOKEN. // parser, guided Sigil_TOKEN (@f constructor variants, @m method classes), // interpret content MethodOrVariantClass appropriately. */","code":""},{"path":[]},{"path":[]},{"path":"https://bbuchsbaum.github.io/bidser/bidser_cheatsheet.html","id":"usage","dir":"","previous_headings":"1. BIDS Project Creation & Structure","what":"Usage:","title":"bidser","text":"Create BIDS project directory @f bids_project(path, fmriprep?=FALSE, prep_dir?=\"derivatives/fmriprep\"). -memory/mock datasets, use @f create_mock_bids(...). fmriprep : lgl (constants: TRUE, FALSE) Include fMRIPrep derivatives. prep_dir : chr (constants: “derivatives/fmriprep”) Path derivatives. @f create_mock_bids (project_name, participants, file_structure, dataset_description?=NULL, event_data?=lst(), confound_data?=lst(), create_stub?=FALSE, stub_path?=NULL, prep_dir?=“derivatives/fmriprep”) | Create -memory/mock BIDS project -> obj","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/bidser/bidser_cheatsheet.html","id":"usage-1","dir":"","previous_headings":"2. Core Query & File Access","what":"Usage:","title":"bidser","text":"Use methods like participants(), sessions(), tasks(), flat_list() enumerate project entities. Use func_scans(), preproc_scans(), event_files(), confound_files() get file paths type. full_path : lgl (constants: TRUE, FALSE) Return full file paths. @m func_scans[bids_project|mock_bids_project] (subid?=“.”, task?=”.”, run?=“.”, session?=”.”, kind?=“bold”, full_path?=TRUE, …) | Get functional scan file paths -> chr kind : chr (constants: “bold”) File type. @m preproc_scans[bids_project|mock_bids_project] (subid?=“.”, task?=”.”, run?=“.”, variant?=NULL, space?=”.”, session?=“.”, modality?=”bold”, kind?=”.”, full_path?=FALSE, …) | Get preprocessed scan paths -> chr @m event_files[bids_project|mock_bids_project] (subid?=“.”, task?=”.”, run?=“.”, session?=”.”, full_path?=TRUE, …) | Get event file paths -> chr @m confound_files[bids_project|mock_bids_project] (subid?=“.”, task?=”.”, session?=“.”, run?=”.”, full_path?=FALSE, …) | Get confound file paths -> chr @f search_files (x, regex?=“.*“, full_path?=FALSE, strict?=TRUE, …) | Search files pattern BIDS entities -> chr strict : lgl (constants: TRUE, FALSE) Require queried keys exist.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/bidser/bidser_cheatsheet.html","id":"usage-2","dir":"","previous_headings":"3. Data Reading & Extraction","what":"Usage:","title":"bidser","text":"Use read_events(), load_all_events() read event files nested flat tibbles. Use read_confounds() read confound tables (optionally select variables via cvars, e.g., DEFAULT_CVARS). Use read_func_scans() read_preproc_scans() load 4D image data (requires neuroim2). cvars : chr (constants: DEFAULT_CVARS) Confound variables select. nest : lgl (constants: TRUE, FALSE) Return nested tibble. @f load_all_events (x, subid?=“.”, task?=”.”, run?=“.”, session?=”.”, full_path?=TRUE, …) | Read combine event files -> tib @f read_func_scans (x, mask, mode?=“normal”, subid?=“^sub-.”, task?=”.”, run?=“.*“, modality?=”bold”, …) | Read 4D functional scans -> obj mode : chr (constants: “normal”, “bigvec”) File reading mode. @f read_preproc_scans (x, mask?=NULL, mode?=“normal”, subid?=“^sub-.”, task?=”.”, run?=“.”, modality?=”bold”, …) | Read preprocessed scans -> obj @f read_sidecar (x, subid?=”.”, task?=“.”, run?=”.”, session?=“.”, modality?=”bold”, full_path?=TRUE, …) | Read JSON sidecar metadata -> tib @f get_repetition_time (x, subid, task, run?=”.”, session?=“.*“, …) | Get TR sidecar JSON -> dbl","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/bidser/bidser_cheatsheet.html","id":"usage-3","dir":"","previous_headings":"4. Masking & Subject Access","what":"Usage:","title":"bidser","text":"Use create_preproc_mask() create logical brain mask preprocessed scans. Use brain_mask() shortcut mask creation. thresh : dbl Threshold mask inclusion. @m brain_mask[bids_project] (subid, …) | Get brain mask subject -> obj @f bids_subject (x, subid, …) | Get subject-specific helper functions -> lst","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/bidser/bidser_cheatsheet.html","id":"usage-4","dir":"","previous_headings":"5. Summaries, Checks, and Visualization","what":"Usage:","title":"bidser","text":"Use bids_summary() dataset statistics. Use bids_check_compliance() BIDS compliance checks. Use check_func_scans() scan completeness file size summaries. Use file_pairs() match related files (e.g., BOLD/events). Use plot_bids(), bids_heatmap() visual summaries. @f bids_summary (x) | Summarize BIDS dataset -> lst @f bids_check_compliance (x) | Check BIDS compliance -> lst @f check_func_scans (x) | Inspect scan completeness sizes -> lst @f file_pairs (x, pair?=“bold-events”, task?=“.*“, matchon?=c(”run”, “task”), …) | Match related file pairs -> tib @f plot_bids (x, interactive?=TRUE, color_scheme?=“viridis”, include_derivatives?=TRUE, file_size_scale?=“log”, highlight_missing?=TRUE, visualization_mode?=“standard”, debug?=FALSE) | Visualize BIDS project structure -> obj @f bids_heatmap (x, interactive?=TRUE, color_scheme?=“viridis”, file_type?=“func”, highlight_missing?=TRUE, text_size?=2.5, rotate_labels?=TRUE) | Heatmap visualization BIDS data -> obj","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/bidser/bidser_cheatsheet.html","id":"usage-5","dir":"","previous_headings":"6. Encoding, Parsing, and Helpers","what":"Usage:","title":"bidser","text":"Use encode() extract BIDS entities filenames. Use parse() parser object (e.g., func_parser(), anat_parser(), bids_parser()). @f encode (x, …) | Parse BIDS filename key-value list -> lst @f parse (x, fname, …) | Parse filename parser object -> lst","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/bidser/bidser_cheatsheet.html","id":"usage-6","dir":"","previous_headings":"7. Exported Data Objects (Constants & Choices)","what":"Usage:","title":"bidser","text":"Use DEFAULT_CVARS standard confound variable selection read_confounds(). Use CVARS_ALIASES mapping canonical confound names fMRIPrep column names. @d DEFAULT_CVARS | Standard confound variable names fMRIPrep -> chr @d CVARS_ALIASES | Mapping canonical confound variable names fMRIPrep column aliases -> lst","code":""},{"path":"https://bbuchsbaum.github.io/bidser/bidser_cheatsheet.html","id":"id_8-plotting-s3-methods","dir":"","previous_headings":"","what":"8. Plotting (S3 Methods)","title":"bidser","text":"@m plot[bids_project] (max_depth?=Inf, …) | Plot BIDS tree dendrogram","code":""},{"path":"https://bbuchsbaum.github.io/bidser/bidser_cheatsheet.html","id":"id_9-subject-helper-interface","dir":"","previous_headings":"","what":"9. Subject Helper Interface","title":"bidser","text":"@m bids_subject[bids_project] (subid, …) | Get subject helper interface -> lst","code":""},{"path":"https://bbuchsbaum.github.io/bidser/bidser_cheatsheet.html","id":"id_10-miscellaneous","dir":"","previous_headings":"","what":"10. Miscellaneous","title":"bidser","text":"@f flat_list (x, full_path?=TRUE, …) | Flatten BIDS tree file list -> df","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/bidser/index.html","id":"bidser","dir":"","previous_headings":"","what":"Work with BIDS Projects","title":"Work with BIDS Projects","text":"BIDS R – (’s start!) goal bidser make working BIDS neuroimaging format convenient R. Currently support MRI data support fmriprep derivatives.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Work with BIDS Projects","text":"Install development version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"bbuchsbaum/bidser\")"},{"path":"https://bbuchsbaum.github.io/bidser/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Work with BIDS Projects","text":"See https://bbuchsbaum.github.io/bidser/articles/quickstart.html","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/anat_parser.html","id":null,"dir":"Reference","previous_headings":"","what":"Anatomical parser constructor — anat_parser","title":"Anatomical parser constructor — anat_parser","text":"Anatomical parser constructor","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/anat_parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anatomical parser constructor — anat_parser","text":"","code":"anat_parser()"},{"path":"https://bbuchsbaum.github.io/bidser/reference/anat_parser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Anatomical parser constructor — anat_parser","text":"anatomical BIDS parser object parsing anatomical files","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/anat_parser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Anatomical parser constructor — anat_parser","text":"","code":"# Create an anatomical parser parser <- anat_parser()  # Parse an anatomical file result <- parse(parser, \"sub-01_T1w.nii.gz\")"},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_check_compliance.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic BIDS Compliance Checks — bids_check_compliance","title":"Basic BIDS Compliance Checks — bids_check_compliance","text":"function performs simple, lightweight check common BIDS requirements: Checks participants.tsv dataset_description.json exist root. Ensures subject directories begin sub-. sessions present, ensures session directories begin ses-.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_check_compliance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic BIDS Compliance Checks — bids_check_compliance","text":"","code":"bids_check_compliance(x)  bids_check_compliance(x)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_check_compliance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic BIDS Compliance Checks — bids_check_compliance","text":"x bids_project object.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_check_compliance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic BIDS Compliance Checks — bids_check_compliance","text":"list compliance check results list : passed (logical): TRUE checks passed, FALSE otherwise. issues (character vector): Descriptions issues found.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_check_compliance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Basic BIDS Compliance Checks — bids_check_compliance","text":"Note: full BIDS validator. complete validation, use official BIDS validator.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_check_compliance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basic BIDS Compliance Checks — bids_check_compliance","text":"","code":"# \\donttest{ tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)   compliance <- bids_check_compliance(proj)      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a specialized heatmap visualization of BIDS data — bids_heatmap","title":"Create a specialized heatmap visualization of BIDS data — bids_heatmap","text":"function creates heatmap visualization BIDS project, x-axis represents subjects y-axis represents tasks run. cell heatmap colored file size, providing intuitive view data completeness size distribution across project. particularly useful quality control identifying missing data.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a specialized heatmap visualization of BIDS data — bids_heatmap","text":"","code":"bids_heatmap(   x,   interactive = TRUE,   color_scheme = \"viridis\",   file_type = \"func\",   highlight_missing = TRUE,   text_size = 2.5,   rotate_labels = TRUE )"},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a specialized heatmap visualization of BIDS data — bids_heatmap","text":"x bids_project object interactive Logical. Whether create interactive plot (default TRUE) color_scheme Character. Name color palette use (default \"viridis\") file_type Character. Type files visualize (default \"func\") highlight_missing Logical. Whether highlight missing data points (default TRUE) text_size Numeric. Size text labels (default 2.5) rotate_labels Logical. Whether rotate axis labels (default TRUE)","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a specialized heatmap visualization of BIDS data — bids_heatmap","text":"plot object (ggplot2 plotly depending interactive parameter)","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a specialized heatmap visualization of BIDS data — bids_heatmap","text":"","code":"# \\donttest{ # Create a basic interactive heatmap for a BIDS dataset tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)   bids_heatmap(proj)      # Create a static heatmap with custom settings   bids_heatmap(proj,                 interactive = FALSE,                color_scheme = \"plasma\",                text_size = 3,                rotate_labels = FALSE)      # Visualize anatomical data with missing data highlighted   bids_heatmap(proj,                 file_type = \"anat\",                highlight_missing = TRUE,                color_scheme = \"magma\")      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_parser.html","id":null,"dir":"Reference","previous_headings":"","what":"BIDS filename parsers using regex — bids_parser","title":"BIDS filename parsers using regex — bids_parser","text":"functions create parsers different types BIDS files using regex-based pattern matching instead parser combinators. Create parser generic BIDS file","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BIDS filename parsers using regex — bids_parser","text":"","code":"bids_parser()"},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_parser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BIDS filename parsers using regex — bids_parser","text":"BIDS parser object can parse various types BIDS files","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_parser.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"BIDS filename parsers using regex — bids_parser","text":"parser tries match various known parsers (anat, func, fmriprep anat/func).","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_parser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BIDS filename parsers using regex — bids_parser","text":"","code":"# Create a generic BIDS parser parser <- bids_parser()  # Parse different types of files anat_result <- parse(parser, \"sub-01_T1w.nii.gz\") func_result <- parse(parser, \"sub-01_task-rest_bold.nii.gz\") prep_result <- parse(parser, \"sub-01_task-rest_space-MNI152NLin2009cAsym_desc-preproc_bold.nii.gz\")"},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a BIDS Project Object — bids_project","title":"Create a BIDS Project Object — bids_project","text":"function creates BIDS project object directory containing BIDS-formatted neuroimaging data. can optionally load preprocessed derivatives fMRIPrep. function validates basic BIDS structure provides methods accessing raw preprocessed data, querying subjects, sessions, tasks, reading event files, checking BIDS compliance.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a BIDS Project Object — bids_project","text":"","code":"bids_project(path = \".\", fmriprep = FALSE, prep_dir = \"derivatives/fmriprep\")"},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a BIDS Project Object — bids_project","text":"path Character string. file path root BIDS project. Defaults current directory (\".\"). fmriprep Logical. Whether load fMRIPrep derivatives folder hierarchy. Defaults FALSE. prep_dir Character string. location fMRIPrep subfolder relative derivatives directory. Defaults \"derivatives/fmriprep\".","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a BIDS Project Object — bids_project","text":"bids_project object representing BIDS project structure. object provides methods : Accessing raw preprocessed data files Querying subjects, sessions, tasks Reading event files confound regressors Checking BIDS compliance Extracting metadata file names Returns NULL directory contain valid BIDS dataset.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a BIDS Project Object — bids_project","text":"","code":"# \\donttest{ # Create a BIDS project tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)      # Get all functional scans   all_scans <- func_scans(proj)      # Get scans for specific subjects   sub_scans <- func_scans(proj, subid=\"0[123]\")      # Get scans for a specific task   task_scans <- func_scans(proj, task=\"rest\")      # Get scans from specific runs   run_scans <- func_scans(proj, run=\"0[123]\")      # Combine multiple filters   filtered_scans <- func_scans(proj,                               subid=\"01\",                               task=\"rest\",                               run=\"01\")      # Get relative paths instead of full paths   rel_scans <- func_scans(proj, full_path=FALSE)      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_subject.html","id":null,"dir":"Reference","previous_headings":"","what":"Access a single subject from a BIDS project — bids_subject","title":"Access a single subject from a BIDS project — bids_subject","text":"bids_subject returns lightweight interface helper functions retrieving data associated one subject. bids_subject returns lightweight facade exposes convenience functions work data associated one subject within BIDS project. function extracts single subject's data BIDS project, creating new BIDS project object containing subject's files metadata.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_subject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access a single subject from a BIDS project — bids_subject","text":"","code":"bids_subject(x, subid, ...)  bids_subject.bids_project(x, subid, ...)  bids_subject(x, subid, ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_subject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access a single subject from a BIDS project — bids_subject","text":"x bids_project object. subid Character string. subject ID extract (without \"sub-\" prefix). ... Additional arguments (currently used).","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_subject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access a single subject from a BIDS project — bids_subject","text":"list helper functions subject. list containing subject-specific helper functions. function automatically filters results specified subject. returned object contains following callable functions: events(...) Returns nested tibble event data subject. Equivalent read_events(project, subid = \"XX\", ...). Additional arguments (task, session, run, nest, etc.) can passed. event_files(...) Returns character vector event file paths subject. Equivalent event_files(project, subid = \"XX\", ...). Additional arguments (task, session, run, full_path, etc.) can passed. scans(...) Returns character vector functional scan file paths subject. Equivalent func_scans(project, subid = \"XX\", ...). Additional arguments (task, session, run, kind, full_path, etc.) can passed. confounds(...) Returns confound data subject (requires fMRIPrep derivatives). Equivalent read_confounds(project, subid = \"XX\", ...). Additional arguments (task, session, run, cvars, npcs, etc.) can passed. preproc_scans(...) Returns preprocessed scan paths subject (requires fMRIPrep derivatives). Equivalent preproc_scans(project, subid = \"XX\", ...). Additional arguments (task, session, run, space, variant, etc.) can passed. brain_mask(...) Creates brain mask subject (requires fMRIPrep derivatives). Equivalent brain_mask(project, subid = \"XX\", ...). Additional arguments (thresh, etc.) can passed. new bids_project object containing specified subject's data. Returns NULL subject found project.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_subject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access a single subject from a BIDS project — bids_subject","text":"","code":"# \\donttest{ tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)   subj <- bids_subject(proj, \"01\")   subj$events()   subj$scans()      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) #> Rows: 158 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 156 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. # } # \\donttest{ tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)      # Create subject interface for subject 01   subj <- bids_subject(proj, \"01\")      # Get functional scan paths for this subject   scan_paths <- subj$scans()   print(paste(\"Subject 01 has\", length(scan_paths), \"functional scans\"))      # Get event file paths for this subject   event_paths <- subj$event_files()   print(paste(\"Subject 01 has\", length(event_paths), \"event files\"))      # Read event data for this subject   event_data <- subj$events()   print(\"Event data structure:\")   print(event_data)      # You can still pass additional filtering arguments   # For example, get only specific tasks:   task_scans <- subj$scans(task = \"balloonanalogrisktask\")      # Note: Don't unlink - cached for performance   # unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) #> [1] \"Subject 01 has 3 functional scans\" #> [1] \"Subject 01 has 3 event files\" #> Rows: 158 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 156 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> [1] \"Event data structure:\" #> # A tibble: 3 × 5 #> # Groups:   .task, .session, .run, .subid [3] #>   .subid .session .run  .task                 data               #>   <chr>  <chr>    <chr> <chr>                 <list>             #> 1 01     NA       01    balloonanalogrisktask <tibble [158 × 2]> #> 2 01     NA       02    balloonanalogrisktask <tibble [156 × 2]> #> 3 01     NA       03    balloonanalogrisktask <tibble [149 × 2]> # } # \\donttest{ # Create a subject interface tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)      # Create subject interface for subject 01     subj <- bids_subject(proj, \"01\")      # Use the helper functions   scans <- subj$scans()   events <- subj$event_files()   print(paste(\"Subject 01:\", length(scans), \"scans,\", length(events), \"events\"))      # Note: Don't unlink - cached for performance   # unlink(ds001_path, recursive=TRUE)   }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) #> [1] \"Subject 01: 3 scans, 3 events\" # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a BIDS dataset — bids_summary","title":"Summarize a BIDS dataset — bids_summary","text":"Provides quick summary dataset statistics, including: Number subjects Number sessions (applicable) Available tasks number runs per task Total number runs","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a BIDS dataset — bids_summary","text":"","code":"bids_summary(x)  bids_summary(x)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a BIDS dataset — bids_summary","text":"x bids_project object.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a BIDS dataset — bids_summary","text":"list containing summary statistics BIDS dataset list summary information: n_subjects: number participants n_sessions: number sessions (), otherwise NULL tasks: data frame task n_runs columns total_runs: total number runs across dataset","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bids_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a BIDS dataset — bids_summary","text":"","code":"# \\donttest{ tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)   summary <- bids_summary(proj)      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/bidser_pkg_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal environment for package-wide state — bidser_pkg_env","title":"Internal environment for package-wide state — bidser_pkg_env","text":"environment used store session level objects example dataset cache without assigning global environment.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/bidser_pkg_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal environment for package-wide state — bidser_pkg_env","text":"","code":"bidser_pkg_env"},{"path":"https://bbuchsbaum.github.io/bidser/reference/bidser_pkg_env.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Internal environment for package-wide state — bidser_pkg_env","text":"object class environment length 0.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/brain_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a brain mask for a subject — brain_mask","title":"Retrieve a brain mask for a subject — brain_mask","text":"convenience function wraps create_preproc_mask() returns brain mask volume given subject.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/brain_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a brain mask for a subject — brain_mask","text":"","code":"brain_mask(x, subid, ...)  # S3 method for class 'bids_project' brain_mask(x, subid, ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/brain_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a brain mask for a subject — brain_mask","text":"x bids_project object subid regular expression pattern match subject IDs ... Additional arguments passed methods","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/brain_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a brain mask for a subject — brain_mask","text":"logical mask volume","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/brain_mask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a brain mask for a subject — brain_mask","text":"","code":"# \\donttest{ # Download and load a BIDS project with fMRIPrep derivatives tryCatch({   ds001_deriv_path <- get_example_bids_dataset(\"ds000001-fmriprep\")   proj <- bids_project(ds001_deriv_path, fmriprep=TRUE)   mask <- brain_mask(proj, subid=\"01\")      # Create mask for multiple subjects   multi_mask <- brain_mask(proj, subid=\".*\")      # Clean up   unlink(ds001_deriv_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires derivatives dataset: \", e$message) }) #> Example requires derivatives dataset: participants.tsv is missing # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/check_func_scans.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Functional Scans in a BIDS Project — check_func_scans","title":"Check Functional Scans in a BIDS Project — check_func_scans","text":"function performs comprehensive inspection functional scans within BIDS project, providing detailed summaries scan counts file sizes per subject task. helps identify potential issues missing scans, inconsistent file sizes, unexpected variations data.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/check_func_scans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Functional Scans in a BIDS Project — check_func_scans","text":"","code":"check_func_scans(x)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/check_func_scans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Functional Scans in a BIDS Project — check_func_scans","text":"x bids_project object created bids_project().","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/check_func_scans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Functional Scans in a BIDS Project — check_func_scans","text":"list containing: scans: tibble details functional scans, including: Subject ID Task name Run number File size Full file path tasklist: vector unique tasks found project scans_per_subject: summary tibble showing number scans per subject multiple tasks present, also includes: scans_per_task: Summary scan counts task scans_per_task_subject: Summary scan counts subject task size_per_task: Tibble file size statistics task one task present: size_per_subject: Tibble file size statistics subject","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/check_func_scans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Functional Scans in a BIDS Project — check_func_scans","text":"","code":"# \\donttest{ # Check functional scans in a BIDS dataset tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)   scan_check <- check_func_scans(proj)   print(scan_check)      # Filter for specific subjects   sub01_check <- check_func_scans(proj, subid=\"01\")      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) #> $scans #> # A tibble: 48 × 8 #>    file                                size subid task  run   kind  suffix type  #>    <chr>                              <fs:> <chr> <chr> <chr> <chr> <chr>  <chr> #>  1 sub-01_task-balloonanalogrisktask…     0 01    ball… 01    bold  nii.gz func… #>  2 sub-01_task-balloonanalogrisktask…     0 01    ball… 02    bold  nii.gz func… #>  3 sub-01_task-balloonanalogrisktask…     0 01    ball… 03    bold  nii.gz func… #>  4 sub-02_task-balloonanalogrisktask…     0 02    ball… 01    bold  nii.gz func… #>  5 sub-02_task-balloonanalogrisktask…     0 02    ball… 02    bold  nii.gz func… #>  6 sub-02_task-balloonanalogrisktask…     0 02    ball… 03    bold  nii.gz func… #>  7 sub-03_task-balloonanalogrisktask…     0 03    ball… 01    bold  nii.gz func… #>  8 sub-03_task-balloonanalogrisktask…     0 03    ball… 02    bold  nii.gz func… #>  9 sub-03_task-balloonanalogrisktask…     0 03    ball… 03    bold  nii.gz func… #> 10 sub-04_task-balloonanalogrisktask…     0 04    ball… 01    bold  nii.gz func… #> # ℹ 38 more rows #>  #> $tasklist #> [1] \"balloonanalogrisktask\" #>  #> $scans_per_subject #> # A tibble: 16 × 2 #>    subid nscans #>    <chr>  <int> #>  1 01         3 #>  2 02         3 #>  3 03         3 #>  4 04         3 #>  5 05         3 #>  6 06         3 #>  7 07         3 #>  8 08         3 #>  9 09         3 #> 10 10         3 #> 11 11         3 #> 12 12         3 #> 13 13         3 #> 14 14         3 #> 15 15         3 #> 16 16         3 #>  #> $size_per_subject #> # A tibble: 48 × 9 #>    file                     size subid task  run   kind  suffix type  size_delta #>    <chr>                   <fs:> <chr> <chr> <chr> <chr> <chr>  <chr> <fs::byte> #>  1 sub-01_task-balloonana…     0 01    ball… 01    bold  nii.gz func…          0 #>  2 sub-01_task-balloonana…     0 01    ball… 02    bold  nii.gz func…          0 #>  3 sub-01_task-balloonana…     0 01    ball… 03    bold  nii.gz func…          0 #>  4 sub-02_task-balloonana…     0 02    ball… 01    bold  nii.gz func…          0 #>  5 sub-02_task-balloonana…     0 02    ball… 02    bold  nii.gz func…          0 #>  6 sub-02_task-balloonana…     0 02    ball… 03    bold  nii.gz func…          0 #>  7 sub-03_task-balloonana…     0 03    ball… 01    bold  nii.gz func…          0 #>  8 sub-03_task-balloonana…     0 03    ball… 02    bold  nii.gz func…          0 #>  9 sub-03_task-balloonana…     0 03    ball… 03    bold  nii.gz func…          0 #> 10 sub-04_task-balloonana…     0 04    ball… 01    bold  nii.gz func…          0 #> # ℹ 38 more rows #>  #> attr(,\"class\") #> [1] \"check\"            \"check_func_scans\" #> Example requires internet connection: unused argument (subid = \"01\") # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/clear_example_bids_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear Example BIDS Dataset Cache — clear_example_bids_cache","title":"Clear Example BIDS Dataset Cache — clear_example_bids_cache","text":"Clears session-level cache downloaded example BIDS datasets. can useful free memory force re-download datasets.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/clear_example_bids_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear Example BIDS Dataset Cache — clear_example_bids_cache","text":"","code":"clear_example_bids_cache()"},{"path":"https://bbuchsbaum.github.io/bidser/reference/clear_example_bids_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear Example BIDS Dataset Cache — clear_example_bids_cache","text":"Invisible NULL","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/clear_example_bids_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear Example BIDS Dataset Cache — clear_example_bids_cache","text":"","code":"# Clear the cache clear_example_bids_cache() #> Example BIDS dataset cache cleared"},{"path":"https://bbuchsbaum.github.io/bidser/reference/confound_files-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get confound files from a BIDS project — confound_files","title":"Get confound files from a BIDS project — confound_files","text":"function retrieves vector confound files BIDS project match specified criteria. Confound files BIDS derivatives (typically fMRIPrep) contain nuisance variables can used denoising fMRI data, motion parameters, physiological signals, noise components. Searches mock BIDS structure files matching typical confound file patterns (e.g., *_confounds*.tsv, *_regressors*.tsv, *_timeseries*.tsv) within derivatives directory.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/confound_files-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get confound files from a BIDS project — confound_files","text":"","code":"confound_files(x, ...)  # S3 method for class 'mock_bids_project' confound_files(   x,   subid = \".*\",   task = \".*\",   session = \".*\",   run = \".*\",   full_path = FALSE,   ... )"},{"path":"https://bbuchsbaum.github.io/bidser/reference/confound_files-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get confound files from a BIDS project — confound_files","text":"x mock_bids_project object. ... Additional arguments passed search_files. subid Regex pattern subject IDs. Default \".*\". task Regex pattern task names. Default \".*\". session Regex pattern session IDs. Default \".*\". run Regex pattern run indices. Default \".*\". full_path TRUE, return full paths (prefixed x$path). FALSE (default), return relative paths.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/confound_files-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get confound files from a BIDS project — confound_files","text":"character vector file paths confound files matching specified criteria. matching files found, returns NULL. character vector relative full paths potential confound files, NULL none found.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/confound_files-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get confound files from a BIDS project — confound_files","text":"function assumes confound files reside derivatives path specified x$prep_dir defined file_structure passed create_mock_bids fmriprep=TRUE.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/confound_files-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get confound files from a BIDS project — confound_files","text":"","code":"# \\donttest{ # Get all confound files from a BIDS project with fMRIPrep derivatives tryCatch({   ds_path <- get_example_bids_dataset(\"ds000001-fmriprep\")   proj <- bids_project(ds_path, fmriprep=TRUE)   conf_files <- confound_files(proj)      # Get confound files for specific subjects and tasks   confound_files(proj, subid=\"sub-01\", task=\"balloonanalogrisktask\")      # Clean up   unlink(ds_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) #> Example requires internet connection: participants.tsv is missing # } # Setup mock project with a derivative confound file participants_df <- tibble::tibble(participant_id = \"01\") file_structure_df <- tibble::tribble(   ~subid, ~session, ~datatype, ~task, ~run, ~suffix, ~fmriprep, ~desc,   \"01\",   NA,       \"func\",    \"taskA\", \"01\",    \"desc-confounds_timeseries.tsv\", TRUE, \"confounds\" ) mock_proj <- create_mock_bids(\"ConfoundMock\", participants_df, file_structure_df)  # Find confound files confound_files(mock_proj) #> [1] \"derivatives/fmriprep/sub-01/func/sub-01_task-taskA_run-01_desc-confounds_timeseries.tsv\"  # Find for specific subject confound_files(mock_proj, subid=\"01\") #> [1] \"derivatives/fmriprep/sub-01/func/sub-01_task-taskA_run-01_desc-confounds_timeseries.tsv\""},{"path":"https://bbuchsbaum.github.io/bidser/reference/confound_files.bids_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate confound files — confound_files.bids_project","title":"Locate confound files — confound_files.bids_project","text":"Locate confound files","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/confound_files.bids_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate confound files — confound_files.bids_project","text":"","code":"# S3 method for class 'bids_project' confound_files(x, subid = \".*\", task = \".*\", session = \".*\", ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/confound_files.bids_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate confound files — confound_files.bids_project","text":"x bids_project object subid Subject ID regex task Task regex session Session regex ... Additional arguments (currently used)","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/confound_files.bids_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate confound files — confound_files.bids_project","text":"character vector file paths","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_mock_bids.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Mock BIDS Project Object — create_mock_bids","title":"Create a Mock BIDS Project Object — create_mock_bids","text":"Generates -memory representation BIDS project, suitable testing demonstration without requiring actual data files. Can optionally create \"stub\" directory structure disk.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_mock_bids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Mock BIDS Project Object — create_mock_bids","text":"","code":"create_mock_bids(   project_name,   participants,   file_structure,   dataset_description = NULL,   event_data = list(),   confound_data = list(),   create_stub = FALSE,   stub_path = NULL,   prep_dir = \"derivatives/fmriprep\" )"},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_mock_bids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Mock BIDS Project Object — create_mock_bids","text":"project_name character string project name. participants Either data.frame mirroring participants.tsv content (must include 'participant_id') character vector participant IDs (e.g., c(\"01\", \"02\")). IDs given, minimal part_df created. file_structure data.frame tibble defining files mock structure. row represents file. Required columns: subid, datatype, suffix. Optional BIDS entity columns: session, task, run, acq, rec, dir, space, desc, etc. Must also include logical column fmriprep indicating file belongs derivatives directory specified prep_dir. dataset_description list representing dataset_description.json content. Defaults minimal valid description. event_data named list names relative paths events.tsv files (e.g., \"sub-01/func/sub-01_task-A_run-1_events.tsv\") values corresponding tibble data.frame content files. paths must correspond files defined file_structure suffix like \"events.tsv\". confound_data named list names relative paths confound TSV files within derivatives directory values tibble data.frame content. Paths must match files defined file_structure. create_stub Logical (default FALSE). TRUE, write stub BIDS directory structure disk stub_path. Zero-byte files created except participants.tsv, dataset_description.json, events.tsv files specified event_data. stub_path Character string, path stub directory created. Required create_stub = TRUE. prep_dir Character string, path relative root derivatives (default \"derivatives/fmriprep\"). path structure used internal data.tree stub creation.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_mock_bids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Mock BIDS Project Object — create_mock_bids","text":"object class mock_bids_project.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_mock_bids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Mock BIDS Project Object — create_mock_bids","text":"","code":"# \\donttest{ # --- Example Setup --- participants_df <- tibble::tibble(participant_id = c(\"01\", \"02\"), age = c(25, 30))  file_structure_df <- tibble::tribble(   ~subid, ~session, ~datatype, ~task,   ~run, ~suffix,                  ~fmriprep, ~desc,   \"01\",   NA,       \"anat\",    NA,      NA,   \"T1w.nii.gz\",             FALSE,     NA,   \"01\",   NA,       \"func\",    \"taskA\", \"01\", \"bold.nii.gz\",            FALSE,     NA,   \"01\",   NA,       \"func\",    \"taskA\", \"01\", \"events.tsv\",             FALSE,     NA,   \"02\",   \"test\",   \"anat\",    NA,      NA,   \"T1w.nii.gz\",             FALSE,     NA,   \"02\",   \"test\",   \"func\",    \"taskA\", \"01\", \"bold.nii.gz\",            FALSE,     NA,   \"02\",   \"test\",   \"func\",    \"taskA\", \"01\", \"events.tsv\",             FALSE,     NA,   # Example derivative   \"01\",   NA,       \"func\",    \"taskA\", \"01\", \"preproc_bold.nii.gz\",    TRUE,      \"preproc\" )  # Define event data (paths must match generated structure) event_data_list <- list() event_data_list[[\"sub-01/func/sub-01_task-taskA_run-01_events.tsv\"]] <- tibble::tibble(   onset = c(1.0, 5.0), duration = c(0.5, 0.5), trial_type = c(\"condA\", \"condB\") ) event_data_list[[\"sub-02/ses-test/func/sub-02_ses-test_task-taskA_run-01_events.tsv\"]] <-   tibble::tibble(     onset = c(1.5, 5.5), duration = c(0.5, 0.5), trial_type = c(\"condC\", \"condD\") )  # Create the mock project (in memory only) mock_proj <- create_mock_bids(   project_name = \"MockTaskA\",   participants = participants_df,   file_structure = file_structure_df,   event_data = event_data_list )  # Create the mock project and write stubs mock_proj_stub <- create_mock_bids(   project_name = \"MockTaskA_stub\",   participants = c(\"01\", \"02\"), # Example using just IDs   file_structure = file_structure_df,   event_data = event_data_list,   create_stub = TRUE,   stub_path = tempdir() # Use a temporary directory for example )  # --- Using the Mock Project --- print(mock_proj) #> Mock BIDS Project Summary  #> Project Name:  MockTaskA  #> Participants (n):  2  #> Tasks:  taskA  #> Sessions:  test  #> Derivatives:  derivatives/fmriprep  #> Datatypes:  anat, func  #> Suffixes:  nii.gz, tsv  #> BIDS Keys:  (none)  #> Path:  mock://MockTaskA  print(participants(mock_proj)) #> [1] \"01\" \"02\" print(tasks(mock_proj)) #> [1] \"taskA\" print(sessions(mock_proj)) # Should return \"test\" #> [1] \"test\"  print(func_scans(mock_proj, subid = \"01\")) #> [1] \"MockTaskA/sub-01/func/sub-01_task-taskA_run-01_bold.nii.gz\" print(event_files(mock_proj, subid = \"02\", session = \"test\")) #> [1] \"MockTaskA/sub-02/ses-test/func/sub-02_ses-test_task-taskA_run-01_events.tsv\"  # Read the injected event data events_sub1 <- read_events(mock_proj, subid = \"01\") print(events_sub1) #> # A tibble: 1 × 5 #> # Groups:   .subid, .task, .run, .session [1] #>   .subid .task .run  .session data             #>   <chr>  <chr> <chr> <chr>    <list>           #> 1 01     taskA 01    NA       <tibble [2 × 3]> if (nrow(events_sub1) > 0) print(tidyr::unnest(events_sub1, cols = data)) #> # A tibble: 2 × 7 #> # Groups:   .subid, .task, .run, .session [1] #>   .subid .task .run  .session onset duration trial_type #>   <chr>  <chr> <chr> <chr>    <dbl>    <dbl> <chr>      #> 1 01     taskA 01    NA           1      0.5 condA      #> 2 01     taskA 01    NA           5      0.5 condB       # Search for derivatives print(search_files(mock_proj, suffix = \"preproc_bold.nii.gz\")) #> NULL  # Check stub directory (if created) # list.files(mock_proj_stub$path, recursive = TRUE) # if (file.exists(file.path(mock_proj_stub$path, names(event_data_list)[1]))) { #   print(readLines(file.path(mock_proj_stub$path, names(event_data_list)[1]))) # }  # Clean up stub directory if created in temp # unlink(mock_proj_stub$path, recursive = TRUE) # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_preproc_mask-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Preprocessing Mask (Mock Implementation) — create_preproc_mask.mock_bids_project","title":"Create Preprocessing Mask (Mock Implementation) — create_preproc_mask.mock_bids_project","text":"function implemented mock_bids_project objects contain actual image data required create mask.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_preproc_mask-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Preprocessing Mask (Mock Implementation) — create_preproc_mask.mock_bids_project","text":"","code":"# S3 method for class 'mock_bids_project' create_preproc_mask(x, ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_preproc_mask-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Preprocessing Mask (Mock Implementation) — create_preproc_mask.mock_bids_project","text":"x mock_bids_project object. ... Arguments (ignored).","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_preproc_mask-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Preprocessing Mask (Mock Implementation) — create_preproc_mask.mock_bids_project","text":"Throws error indicating function applicable mock objects.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_preproc_mask.bids_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a binary brain mask from preprocessed scans — create_preproc_mask.bids_project","title":"Create a binary brain mask from preprocessed scans — create_preproc_mask.bids_project","text":"function creates binary brain mask preprocessed functional scans BIDS project. searches brainmask files fMRIPrep derivatives directory, reads using neuroim2 package, averages create single mask. resulting mask can used subsequent analyses preprocessed functional data.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_preproc_mask.bids_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a binary brain mask from preprocessed scans — create_preproc_mask.bids_project","text":"","code":"# S3 method for class 'bids_project' create_preproc_mask(   x,   subid,   thresh = 0.99,   mask_kinds = c(\"brainmask\", \"mask\"),   ... )"},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_preproc_mask.bids_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a binary brain mask from preprocessed scans — create_preproc_mask.bids_project","text":"x bids_project object fMRIPrep derivatives subid Regular expression match subject IDs (e.g., \"01\" subject 01, \".*\" subjects) thresh Threshold value 0 1 (default 0.99). Values outside range trigger error. Voxels values threshold excluded mask. mask_kinds Character vector BIDS file types search locating mask files. Defaults \"brainmask\" (older fMRIPrep versions) \"mask\" desc=\"brain\" (BIDS 1.6+). ... Additional arguments passed search_files finding mask files","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_preproc_mask.bids_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a binary brain mask from preprocessed scans — create_preproc_mask.bids_project","text":"logical mask volume (LogicalNeuroVol) can used subsequent analyses preprocessed functional data.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_preproc_mask.bids_project.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a binary brain mask from preprocessed scans — create_preproc_mask.bids_project","text":"function works finding brainmask files match subject ID pattern, reading memory, averaging , thresholding result create binary mask. useful want analyze multiple runs subjects together need common mask covers brain areas present scans. threshold parameter controls conservative mask . Higher values (closer 1) result conservative mask includes voxels consistently marked brain across subjects/runs. Lower values create inclusive mask.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_preproc_mask.bids_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a binary brain mask from preprocessed scans — create_preproc_mask.bids_project","text":"","code":"# \\donttest{ # Load a BIDS project with fMRIPrep derivatives tryCatch({   ds_path <- get_example_bids_dataset(\"ds000001-fmriprep\")   proj <- bids_project(ds_path, fmriprep=TRUE)      # Create a mask for all subjects (conservative threshold)   all_subj_mask <- create_preproc_mask(proj, subid=\".*\")      # Create a mask for a specific subject   sub01_mask <- create_preproc_mask(proj, subid=\"01\")      # Create a more inclusive mask with a lower threshold   inclusive_mask <- create_preproc_mask(proj, subid=\".*\", thresh=0.8)      # Use additional search criteria   task_mask <- create_preproc_mask(proj, subid=\".*\", task=\"balloonanalogrisktask\")      # Clean up   unlink(ds_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires derivatives dataset: \", e$message) }) #> Example requires derivatives dataset: participants.tsv is missing # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_preproc_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a preprocessing mask from BIDS data — create_preproc_mask","title":"Create a preprocessing mask from BIDS data — create_preproc_mask","text":"Create preprocessing mask BIDS data","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_preproc_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a preprocessing mask from BIDS data — create_preproc_mask","text":"","code":"create_preproc_mask(x, subid, thresh = 0.99, ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_preproc_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a preprocessing mask from BIDS data — create_preproc_mask","text":"x bids_project object subid regular expression pattern match subject IDs thresh Threshold value mask creation (default: 0.99) ... Additional arguments passed methods","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_preproc_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a preprocessing mask from BIDS data — create_preproc_mask","text":"logical mask volume","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_preproc_mask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a preprocessing mask from BIDS data — create_preproc_mask","text":"","code":"# \\donttest{ # Download and load a BIDS project with fMRIPrep derivatives tryCatch({   ds001_deriv_path <- get_example_bids_dataset(\"ds000001-fmriprep\")   proj <- bids_project(ds001_deriv_path, fmriprep=TRUE)   mask <- create_preproc_mask(proj, subid=\".*\")      # Create mask for single subject   sub01_mask <- create_preproc_mask(proj, subid=\"01\")      # Clean up   unlink(ds001_deriv_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires derivatives dataset: \", e$message) }) #> Example requires derivatives dataset: participants.tsv is missing # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_regex_parser.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a regex-based parser from a specification — create_regex_parser","title":"Create a regex-based parser from a specification — create_regex_parser","text":"Create regex-based parser specification","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_regex_parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a regex-based parser from a specification — create_regex_parser","text":"","code":"create_regex_parser(spec)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_regex_parser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a regex-based parser from a specification — create_regex_parser","text":"spec specification object","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/create_regex_parser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a regex-based parser from a specification — create_regex_parser","text":"parser function","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/encode.html","id":null,"dir":"Reference","previous_headings":"","what":"Encode a string into a BIDS key-value list — encode","title":"Encode a string into a BIDS key-value list — encode","text":"function parses BIDS filename extracts components key-value list. understands standard BIDS entities like subject, session, task, run, etc.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/encode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encode a string into a BIDS key-value list — encode","text":"","code":"encode(x, ...)  # S3 method for class 'character' encode(x, ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/encode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encode a string into a BIDS key-value list — encode","text":"x filename string encode ... Additional arguments passed methods","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/encode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encode a string into a BIDS key-value list — encode","text":"list key-value pairs extracted filename","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/encode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encode a string into a BIDS key-value list — encode","text":"","code":"# Encode an anatomical file encode(\"sub-01_T1w.nii.gz\") #> $subid #> [1] \"01\" #>  #> $kind #> [1] \"T1w\" #>  #> $suffix #> [1] \"nii.gz\" #>  #> $type #> [1] \"anatprep\" #>   # Encode a functional file encode(\"sub-01_task-rest_run-01_bold.nii.gz\") #> $subid #> [1] \"01\" #>  #> $task #> [1] \"rest\" #>  #> $run #> [1] \"01\" #>  #> $kind #> [1] \"bold\" #>  #> $suffix #> [1] \"nii.gz\" #>  #> $type #> [1] \"funcprep\" #>   # Encode a file with session information encode(\"sub-01_ses-pre_task-rest_run-01_bold.nii.gz\") #> $subid #> [1] \"01\" #>  #> $session #> [1] \"pre\" #>  #> $task #> [1] \"rest\" #>  #> $run #> [1] \"01\" #>  #> $kind #> [1] \"bold\" #>  #> $suffix #> [1] \"nii.gz\" #>  #> $type #> [1] \"funcprep\" #>"},{"path":"https://bbuchsbaum.github.io/bidser/reference/event_files-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get event files from a BIDS project — event_files","title":"Get event files from a BIDS project — event_files","text":"function retrieves vector event files (events.tsv) BIDS project match specified criteria. Event files BIDS contain trial information task-based functional MRI data, including onset times, durations, trial types. Finds event files matching given subject, task, run, session criteria.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/event_files-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get event files from a BIDS project — event_files","text":"","code":"event_files(x, ...)  # S3 method for class 'bids_project' event_files(   x,   subid = \".*\",   task = \".*\",   run = \".*\",   session = \".*\",   full_path = TRUE,   ... )  # S3 method for class 'mock_bids_project' event_files(   x,   subid = \".*\",   task = \".*\",   run = \".*\",   session = \".*\",   full_path = TRUE,   ... )"},{"path":"https://bbuchsbaum.github.io/bidser/reference/event_files-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get event files from a BIDS project — event_files","text":"x mock_bids_project object ... Additional arguments passed internal functions subid Regex match subject IDs (default: \".*\") task Regex match tasks (default: \".*\") run Regex match runs (default: \".*\") session Regex match sessions (default: \".*\") full_path TRUE, return full paths files (default: TRUE)","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/event_files-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get event files from a BIDS project — event_files","text":"character vector file paths event files matching specified criteria. matching files found, returns NULL. character vector file paths event files. matching files found, returns empty character vector.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/event_files-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get event files from a BIDS project — event_files","text":"","code":"# \\donttest{ # Get all event files from a BIDS project tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)   event_files(proj)      # Get event files for specific subjects and tasks   if (length(participants(proj)) > 0) {     event_files(proj, subid=participants(proj)[1], task=\"balloonanalogrisktask\")   }      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) # } # \\donttest{ # Get event files for a specific subject and task tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   x <- bids_project(ds001_path)   files <- event_files(x, subid=\"01\", task=\"balloonanalogrisktask\")      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/extract_bids_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Regex-based BIDS filename parsers — extract_bids_components","title":"Regex-based BIDS filename parsers — extract_bids_components","text":"module provides regex-based parsers BIDS filenames replacement Combin8R parser combinators. maintains interface using standard R regex functionality. Extract BIDS components using simpler regex patterns","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/extract_bids_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regex-based BIDS filename parsers — extract_bids_components","text":"","code":"extract_bids_components(filename, spec)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/extract_bids_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regex-based BIDS filename parsers — extract_bids_components","text":"filename filename parse spec specification object","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/extract_bids_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regex-based BIDS filename parsers — extract_bids_components","text":"list extracted components NULL","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/extract_bids_entities.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract BIDS entities from the entity part of filename — extract_bids_entities","title":"Extract BIDS entities from the entity part of filename — extract_bids_entities","text":"Extract BIDS entities entity part filename","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/extract_bids_entities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract BIDS entities from the entity part of filename — extract_bids_entities","text":"","code":"extract_bids_entities(entity_part, keystruc_spec)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/extract_bids_entities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract BIDS entities from the entity part of filename — extract_bids_entities","text":"entity_part part filename kind keystruc_spec key structure specification","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/extract_bids_entities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract BIDS entities from the entity part of filename — extract_bids_entities","text":"Named list entities NULL","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/extract_kind_and_suffix.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract kind and suffix from filename — extract_kind_and_suffix","title":"Extract kind and suffix from filename — extract_kind_and_suffix","text":"Extract kind suffix filename","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/extract_kind_and_suffix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract kind and suffix from filename — extract_kind_and_suffix","text":"","code":"extract_kind_and_suffix(filename, kinds_spec)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/extract_kind_and_suffix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract kind and suffix from filename — extract_kind_and_suffix","text":"filename filename kinds_spec kinds specification","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/extract_kind_and_suffix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract kind and suffix from filename — extract_kind_and_suffix","text":"List kind suffix NULL","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/file_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find File Pairs in a BIDS Project — file_pairs","title":"Find File Pairs in a BIDS Project — file_pairs","text":"function matches pairs related files (e.g., BOLD event files) BIDS project, returning tibble matched filenames. useful verifying corresponding files exist subject task, ensuring every BOLD file associated events file.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/file_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find File Pairs in a BIDS Project — file_pairs","text":"","code":"file_pairs(   x,   pair = c(\"bold-events\", \"preproc-events\"),   task = \".*\",   matchon = c(\"run\", \"task\"),   ... )"},{"path":"https://bbuchsbaum.github.io/bidser/reference/file_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find File Pairs in a BIDS Project — file_pairs","text":"x bids_project object. pair character string specifying pair files match. Currently supported: \"bold-events\": matches BOLD files event files \"preproc-events\": matches preprocessed BOLD files event files task regex pattern filter tasks. Default \".*\" (filter). matchon character vector keys match , usually c(\"run\", \"task\"). ... Additional arguments passed internal functions.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/file_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find File Pairs in a BIDS Project — file_pairs","text":"tibble columns: subid: subject ID task: task name [type1]: name first file type (e.g., \"bold\" \"preproc\") [type2]: matched file second type (e.g., \"events\"), NA match found Additional columns matched metadata (e.g., run, session)","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/file_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find File Pairs in a BIDS Project — file_pairs","text":"","code":"# \\donttest{ # Create a BIDS project object tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)      # Match BOLD files with their corresponding event files   bold_pairs <- file_pairs(proj, pair=\"bold-events\")      # Check pairs for a specific task   task_pairs <- file_pairs(proj,                            pair=\"bold-events\",                           task=\"balloonanalogrisktask\")      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/flat_list-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ","title":"Get ","text":"function returns flattened (non-hierarchical) representation BIDS project formatted data frame. extracts file paths file names BIDS tree structure, filtering entries start \"sub-\" focus subject-level data.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/flat_list-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ","text":"","code":"flat_list(x, ...)  # S3 method for class 'bids_project' flat_list(x, full_path = TRUE, ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/flat_list-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ","text":"x bids_project object ... extra args passed methods full_path TRUE, return full paths files; FALSE, return just file names (default: TRUE)","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/flat_list-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ","text":"data frame containing either full paths files (full_path=TRUE) just file names (full_path=FALSE). row represents one file BIDS project.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/flat_list-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ","text":"","code":"# \\donttest{ # Get flat representation with full paths tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)   flat_list(proj)      # Get flat representation with just file names   flat_list(proj, full_path=FALSE)      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/fmap_parser.html","id":null,"dir":"Reference","previous_headings":"","what":"Fieldmap parser constructor — fmap_parser","title":"Fieldmap parser constructor — fmap_parser","text":"Fieldmap parser constructor","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/fmap_parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fieldmap parser constructor — fmap_parser","text":"","code":"fmap_parser()"},{"path":"https://bbuchsbaum.github.io/bidser/reference/fmap_parser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fieldmap parser constructor — fmap_parser","text":"fieldmap BIDS parser object parsing fieldmap files","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/fmap_parser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fieldmap parser constructor — fmap_parser","text":"","code":"# Create a fieldmap parser parser <- fmap_parser()  # Parse a fieldmap file result <- parse(parser, \"sub-01_magnitude1.nii.gz\")"},{"path":"https://bbuchsbaum.github.io/bidser/reference/fmriprep_anat_parser.html","id":null,"dir":"Reference","previous_headings":"","what":"fMRIPrep anatomical parser constructor — fmriprep_anat_parser","title":"fMRIPrep anatomical parser constructor — fmriprep_anat_parser","text":"fMRIPrep anatomical parser constructor","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/fmriprep_anat_parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fMRIPrep anatomical parser constructor — fmriprep_anat_parser","text":"","code":"fmriprep_anat_parser()"},{"path":"https://bbuchsbaum.github.io/bidser/reference/fmriprep_anat_parser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fMRIPrep anatomical parser constructor — fmriprep_anat_parser","text":"fMRIPrep anatomical parser object parsing preprocessed anatomical files","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/fmriprep_anat_parser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fMRIPrep anatomical parser constructor — fmriprep_anat_parser","text":"","code":"# Create an fMRIPrep anatomical parser parser <- fmriprep_anat_parser()  # Parse a preprocessed anatomical file result <- parse(parser, \"sub-01_space-MNI152NLin2009cAsym_desc-preproc_T1w.nii.gz\")"},{"path":"https://bbuchsbaum.github.io/bidser/reference/fmriprep_func_parser.html","id":null,"dir":"Reference","previous_headings":"","what":"fMRIPrep functional parser constructor — fmriprep_func_parser","title":"fMRIPrep functional parser constructor — fmriprep_func_parser","text":"fMRIPrep functional parser constructor","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/fmriprep_func_parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fMRIPrep functional parser constructor — fmriprep_func_parser","text":"","code":"fmriprep_func_parser()"},{"path":"https://bbuchsbaum.github.io/bidser/reference/fmriprep_func_parser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fMRIPrep functional parser constructor — fmriprep_func_parser","text":"fMRIPrep functional parser object parsing preprocessed functional files","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/fmriprep_func_parser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fMRIPrep functional parser constructor — fmriprep_func_parser","text":"","code":"# Create an fMRIPrep functional parser parser <- fmriprep_func_parser()  # Parse a preprocessed functional file result <- parse(parser, \"sub-01_task-rest_space-MNI152NLin2009cAsym_desc-preproc_bold.nii.gz\")"},{"path":"https://bbuchsbaum.github.io/bidser/reference/func_parser.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional parser constructor — func_parser","title":"Functional parser constructor — func_parser","text":"Functional parser constructor","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/func_parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional parser constructor — func_parser","text":"","code":"func_parser()"},{"path":"https://bbuchsbaum.github.io/bidser/reference/func_parser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functional parser constructor — func_parser","text":"functional BIDS parser object parsing functional MRI files","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/func_parser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functional parser constructor — func_parser","text":"","code":"# Create a functional parser parser <- func_parser()  # Parse a functional file result <- parse(parser, \"sub-01_task-rest_run-01_bold.nii.gz\")"},{"path":"https://bbuchsbaum.github.io/bidser/reference/func_scans.bids_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Functional Scans from a BIDS Project — func_scans.bids_project","title":"Get Functional Scans from a BIDS Project — func_scans.bids_project","text":"method extracts functional scan files BIDS project based specified criteria subject ID, task name, run number, session. can return either full relative file paths functional scans.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/func_scans.bids_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Functional Scans from a BIDS Project — func_scans.bids_project","text":"","code":"# S3 method for class 'bids_project' func_scans(   x,   subid = \".*\",   task = \".*\",   run = \".*\",   session = \".*\",   kind = \"bold\",   full_path = TRUE,   ... )"},{"path":"https://bbuchsbaum.github.io/bidser/reference/func_scans.bids_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Functional Scans from a BIDS Project — func_scans.bids_project","text":"x bids_project object. subid Regular expression matching subject IDs. Default \".*\". task Regular expression matching task names. Default \".*\". run Regular expression matching run numbers. Default \".*\". session Regular expression matching session IDs. Default \".*\". kind Regular expression matching scan type. Default \"bold\". full_path Logical. TRUE, return full file paths. FALSE, return relative paths. Default TRUE. ... Additional arguments (currently used).","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/func_scans.bids_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Functional Scans from a BIDS Project — func_scans.bids_project","text":"character vector file paths functional scans matching criteria. Returns NULL : matching files found project contain functional data specified criteria match files","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/func_scans.bids_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Functional Scans from a BIDS Project — func_scans.bids_project","text":"","code":"# \\donttest{ # Create a BIDS project tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)      # Get all functional scans   all_scans <- func_scans(proj)      # Get scans for specific subjects   sub_scans <- func_scans(proj, subid=\"0[123]\")      # Get scans for a specific task   task_scans <- func_scans(proj, task=\"rest\")      # Get scans from specific runs   run_scans <- func_scans(proj, run=\"0[123]\")      # Combine multiple filters   filtered_scans <- func_scans(proj,                               subid=\"01\",                               task=\"rest\",                               run=\"01\")      # Get relative paths instead of full paths   rel_scans <- func_scans(proj, full_path=FALSE)      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/func_scans.html","id":null,"dir":"Reference","previous_headings":"","what":"Get functional scans from a BIDS project — func_scans","title":"Get functional scans from a BIDS project — func_scans","text":"function extracts functional scan files BIDS project match specified criteria subject ID, task name, run number, session. can return either full paths relative paths files.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/func_scans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get functional scans from a BIDS project — func_scans","text":"","code":"func_scans(x, ...)  # S3 method for class 'mock_bids_project' func_scans(   x,   subid = \".*\",   task = \".*\",   run = \".*\",   session = \".*\",   kind = \"bold\",   suffix = \"nii(\\\\.gz)?$\",   full_path = TRUE,   ... )"},{"path":"https://bbuchsbaum.github.io/bidser/reference/func_scans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get functional scans from a BIDS project — func_scans","text":"x mock_bids_project object ... Additional arguments passed search_files subid Regex match subject IDs (default: \".*\") task Regex match tasks (default: \".*\") run Regex match runs (default: \".*\") session Regex match sessions (default: \".*\") kind Type functional data (default: \"bold\") suffix Regex pattern file suffix (default: \"nii(\\.gz)?$\") full_path TRUE, return full file paths (default: TRUE)","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/func_scans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get functional scans from a BIDS project — func_scans","text":"character vector file paths functional scans matching criteria. Returns NULL matching files found.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/func_scans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get functional scans from a BIDS project — func_scans","text":"","code":"# \\donttest{ # Create a BIDS project object tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)      # Get all functional scans   all_scans <- func_scans(proj)      # Get scans for specific subjects   if (length(participants(proj)) > 0) {     sub_scans <- func_scans(proj, subid=participants(proj)[1])   }      # Get scans for a specific task and run   if (length(tasks(proj)) > 0) {     task_scans <- func_scans(proj, task=tasks(proj)[1], run=\"01\")   }      # Get scans with relative paths   rel_scans <- func_scans(proj, full_path=FALSE)      # Also try with a dataset that has sessions   ds007_path <- get_example_bids_dataset(\"ds007\")   ds007_proj <- bids_project(ds007_path)   if (length(sessions(ds007_proj)) > 0) {     session_scans <- func_scans(ds007_proj, session=sessions(ds007_proj)[1])   }      # Clean up   unlink(ds001_path, recursive=TRUE)   unlink(ds007_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/get_example_bids_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Example BIDS Dataset — get_example_bids_dataset","title":"Download Example BIDS Dataset — get_example_bids_dataset","text":"Downloads extracts example BIDS dataset testing demonstration purposes. datasets sourced official BIDS examples repository GitHub.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/get_example_bids_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Example BIDS Dataset — get_example_bids_dataset","text":"","code":"get_example_bids_dataset(dataset_name = \"ds001\")"},{"path":"https://bbuchsbaum.github.io/bidser/reference/get_example_bids_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Example BIDS Dataset — get_example_bids_dataset","text":"dataset_name Character string specifying dataset download. Common options include \"ds001\", \"ds002\", \"ds007\", \"phoneme_stripped\", etc.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/get_example_bids_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Example BIDS Dataset — get_example_bids_dataset","text":"Character string containing path downloaded dataset directory.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/get_example_bids_dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download Example BIDS Dataset — get_example_bids_dataset","text":"function requires internet connection download data GitHub. datasets cached temporary directory memory session, repeated calls dataset_name reuse already downloaded data. Note: call unlink() returned path examples, defeats caching mechanism forces re-downloads.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/get_example_bids_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Example BIDS Dataset — get_example_bids_dataset","text":"","code":"# \\donttest{ tryCatch({   ds_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds_path)   print(participants(proj))      # Note: Don't unlink the path - it's cached for performance   # unlink(ds_path, recursive=TRUE)  # DON'T DO THIS }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) #>  [1] \"01\" \"02\" \"03\" \"04\" \"05\" \"06\" \"07\" \"08\" \"09\" \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" #> [16] \"16\" # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/get_repetition_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Repetition Time (TR) from a sidecar JSON — get_repetition_time","title":"Get Repetition Time (TR) from a sidecar JSON — get_repetition_time","text":"function attempts find return repetition time (TR) given subject, task, run (optionally session) locating associated BOLD sidecar JSON file extracting 'RepetitionTime' field. found, returns NA.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/get_repetition_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Repetition Time (TR) from a sidecar JSON — get_repetition_time","text":"","code":"get_repetition_time(x, subid, task, run = \".*\", session = \".*\", ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/get_repetition_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Repetition Time (TR) from a sidecar JSON — get_repetition_time","text":"x bids_project object. subid Subject ID (exact regex). task Task name (exact regex). run Run number (exact regex). Default \".*\" allow flexible matching. session Session ID (exact regex). Default \".*\". ... Additional arguments passed read_sidecar().","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/get_repetition_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Repetition Time (TR) from a sidecar JSON — get_repetition_time","text":"numeric value representing RepetitionTime seconds, NA found.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/get_repetition_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Repetition Time (TR) from a sidecar JSON — get_repetition_time","text":"","code":"# \\donttest{ # Download and get TR for a specific subject and task tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)      if (length(participants(proj)) > 0 && length(tasks(proj)) > 0) {     tr <- get_repetition_time(proj,                               subid=participants(proj)[1],                               task=tasks(proj)[1])     cat(\"TR:\", tr, \"seconds\\n\")   }      # Try with a dataset that has sessions   ds007_path <- get_example_bids_dataset(\"ds007\")   ds007_proj <- bids_project(ds007_path)   if (length(participants(ds007_proj)) > 0 && length(sessions(ds007_proj)) > 0) {     tr_session <- get_repetition_time(ds007_proj,                                      subid=participants(ds007_proj)[1],                                      session=sessions(ds007_proj)[1])     cat(\"TR with session:\", tr_session, \"seconds\\n\")   }      # Clean up   unlink(ds001_path, recursive=TRUE)   unlink(ds007_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) #> No matching JSON sidecar files found. #> No matching sidecar JSON file found for the specified criteria. #> TR: NA seconds # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/list_pack_bids.html","id":null,"dir":"Reference","previous_headings":"","what":"List Contents of Packed BIDS Archive — list_pack_bids","title":"List Contents of Packed BIDS Archive — list_pack_bids","text":"function lists contents BIDS archive created pack_bids, showing file sizes identifying files stubs.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/list_pack_bids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Contents of Packed BIDS Archive — list_pack_bids","text":"","code":"list_pack_bids(archive_path, verbose = TRUE)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/list_pack_bids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Contents of Packed BIDS Archive — list_pack_bids","text":"archive_path Character string specifying path archive file. verbose Logical. Whether print summary statistics. Default TRUE.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/list_pack_bids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Contents of Packed BIDS Archive — list_pack_bids","text":"data frame columns: file Relative file path within archive size File size bytes is_stub Logical indicating file 0-byte stub is_downsampled Logical indicating file downsampled image type File type based extension (imaging, imaging_stub, imaging_downsampled, json, tsv, etc.)","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/list_pack_bids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Contents of Packed BIDS Archive — list_pack_bids","text":"","code":"# \\donttest{ # Create and inspect a packed BIDS archive tryCatch({   ds_path <- get_example_bids_dataset(\"ds001\")    proj <- bids_project(ds_path)   archive_path <- pack_bids(proj, verbose = FALSE)      # List contents   contents <- list_pack_bids(archive_path)      # Show stub files   stub_files <- contents[contents$is_stub, ]   print(head(stub_files))      # Clean up   unlink(archive_path)   unlink(ds_path, recursive = TRUE) }, error = function(e) {   message(\"Example failed: \", e$message) }) #> Example failed: could not find function \"pack_bids\" # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/load_all_events-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Load All Event Files — load_all_events","title":"Load All Event Files — load_all_events","text":"Searches reads event files (events.tsv) BIDS project, combining single (potentially nested) tibble. function searches events.tsv files match provided filters (subid, task, run, session) loads single tibble. full_path=TRUE, full file paths returned; otherwise relative paths.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/load_all_events-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load All Event Files — load_all_events","text":"","code":"load_all_events(x, ...)  # S3 method for class 'bids_project' load_all_events(   x,   subid = \".*\",   task = \".*\",   run = \".*\",   session = \".*\",   full_path = TRUE,   ... )"},{"path":"https://bbuchsbaum.github.io/bidser/reference/load_all_events-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load All Event Files — load_all_events","text":"x bids_project object. ... Additional arguments passed search_files. subid regex matching participant IDs. Default \".*\". task regex matching tasks. Default \".*\". run regex matching runs. Default \".*\". session regex matching sessions. Default \".*\". full_path TRUE, return full file paths reading. Default TRUE.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/load_all_events-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load All Event Files — load_all_events","text":"tibble containing combined event data. tibble combining matched event files, columns .subid, .task, .run, .session event columns. events found, returns empty tibble.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/load_all_events-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load All Event Files — load_all_events","text":"","code":"# \\donttest{ # Example with a bids_project (assuming events exist) tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)   all_events <- load_all_events(proj)   print(all_events)      # Load specific subject/task   if (length(participants(proj)) > 0) {     sub01_events <- load_all_events(proj, subid=participants(proj)[1], task=\"balloonanalogrisktask\")     print(sub01_events)   }      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) #> Rows: 158 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 156 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 185 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 184 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 186 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 150 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 169 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 175 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 166 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 175 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 169 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 135 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 138 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 146 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 177 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 187 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 172 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 170 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 162 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 160 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 163 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 166 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 165 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 172 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 167 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 158 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 175 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 173 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 173 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 150 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 153 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 168 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 156 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 148 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 151 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 172 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 162 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 168 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 173 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 162 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 127 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 135 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 121 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 141 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 157 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 7,723 × 7 #>    .subid .session .task                .run  file  onset\\tduration\\ttri…¹ .file #>    <chr>  <chr>    <chr>                <chr> <chr> <chr>                  <chr> #>  1 01     NA       balloonanalogriskta… 01    /tmp… \"0.061\\t0.772\\tpumps_… /tmp… #>  2 01     NA       balloonanalogriskta… 01    /tmp… \"4.958\\t0.772\\tpumps_… /tmp… #>  3 01     NA       balloonanalogriskta… 01    /tmp… \"7.179\\t0.772\\tpumps_… /tmp… #>  4 01     NA       balloonanalogriskta… 01    /tmp… \"10.416\\t0.772\\tpumps… /tmp… #>  5 01     NA       balloonanalogriskta… 01    /tmp… \"13.419\\t0.772\\tpumps… /tmp… #>  6 01     NA       balloonanalogriskta… 01    /tmp… \"16.754\\t0.772\\texplo… /tmp… #>  7 01     NA       balloonanalogriskta… 01    /tmp… \"24.905\\t0.772\\tpumps… /tmp… #>  8 01     NA       balloonanalogriskta… 01    /tmp… \"27.454\\t0.772\\tpumps… /tmp… #>  9 01     NA       balloonanalogriskta… 01    /tmp… \"30.111\\t0.772\\tcash_… /tmp… #> 10 01     NA       balloonanalogriskta… 01    /tmp… \"38.449\\t0.772\\tpumps… /tmp… #> # ℹ 7,713 more rows #> # ℹ abbreviated name: #> #   ¹​`onset\\tduration\\ttrial_type\\tcash_demean\\tcontrol_pumps_demean\\texplode_demean\\tpumps_demean\\tresponse_time` #> Rows: 158 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 156 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 463 × 7 #>    .subid .session .task                .run  file  onset\\tduration\\ttri…¹ .file #>    <chr>  <chr>    <chr>                <chr> <chr> <chr>                  <chr> #>  1 01     NA       balloonanalogriskta… 01    /tmp… \"0.061\\t0.772\\tpumps_… /tmp… #>  2 01     NA       balloonanalogriskta… 01    /tmp… \"4.958\\t0.772\\tpumps_… /tmp… #>  3 01     NA       balloonanalogriskta… 01    /tmp… \"7.179\\t0.772\\tpumps_… /tmp… #>  4 01     NA       balloonanalogriskta… 01    /tmp… \"10.416\\t0.772\\tpumps… /tmp… #>  5 01     NA       balloonanalogriskta… 01    /tmp… \"13.419\\t0.772\\tpumps… /tmp… #>  6 01     NA       balloonanalogriskta… 01    /tmp… \"16.754\\t0.772\\texplo… /tmp… #>  7 01     NA       balloonanalogriskta… 01    /tmp… \"24.905\\t0.772\\tpumps… /tmp… #>  8 01     NA       balloonanalogriskta… 01    /tmp… \"27.454\\t0.772\\tpumps… /tmp… #>  9 01     NA       balloonanalogriskta… 01    /tmp… \"30.111\\t0.772\\tcash_… /tmp… #> 10 01     NA       balloonanalogriskta… 01    /tmp… \"38.449\\t0.772\\tpumps… /tmp… #> # ℹ 453 more rows #> # ℹ abbreviated name: #> #   ¹​`onset\\tduration\\ttrial_type\\tcash_demean\\tcontrol_pumps_demean\\texplode_demean\\tpumps_demean\\tresponse_time` # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/pack_bids.html","id":null,"dir":"Reference","previous_headings":"","what":"Pack BIDS Project with Stub or Downsampled Imaging Files — pack_bids","title":"Pack BIDS Project with Stub or Downsampled Imaging Files — pack_bids","text":"function creates compressed archive (tar.gz zip) BIDS project, either replacing large imaging files (.nii, .nii.gz) 0-byte stub files downsampling lower resolution preserving metadata files (JSON, TSV, etc.) full content. useful sharing BIDS project structure metadata without large imaging data.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/pack_bids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pack BIDS Project with Stub or Downsampled Imaging Files — pack_bids","text":"","code":"pack_bids(   x,   output_file = NULL,   format = NULL,   include_derivatives = TRUE,   downsample_factor = NULL,   downsample_method = \"box\",   ncores = 1,   verbose = TRUE,   temp_dir = NULL,   cleanup = TRUE )"},{"path":"https://bbuchsbaum.github.io/bidser/reference/pack_bids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pack BIDS Project with Stub or Downsampled Imaging Files — pack_bids","text":"x bids_project object created bids_project. output_file Character string specifying output archive filename. end \".tar.gz\" \".zip\". specified, defaults \"project_name_metadata.tar.gz\" current directory. format Character string specifying archive format. Can \"tar.gz\" (default) \"zip\". specified, inferred output_file extension. include_derivatives Logical. Whether include fMRIPrep derivatives available. Default TRUE. downsample_factor Numeric value 0 1 specifying downsampling factor imaging files. NULL (default), creates stub files. value 0.25 reduces dimensions 4x (e.g., 64x64x64 becomes 16x16x16). Time dimension preserved 4D files. downsample_method Character string specifying downsampling method. Currently \"box\" (box averaging) supported. Default \"box\". ncores Integer specifying number cores parallel processing downsampling. Default 1 (sequential). Values > 1 enable parallel processing 'future' package available. verbose Logical. Whether print progress messages. Default TRUE. temp_dir Character string specifying temporary directory creating archive. NULL (default), uses tempdir(). cleanup Logical. Whether clean temporary directory creating archive. Default TRUE.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/pack_bids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pack BIDS Project with Stub or Downsampled Imaging Files — pack_bids","text":"Character string containing path created archive file. Returns NULL operation fails.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/pack_bids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pack BIDS Project with Stub or Downsampled Imaging Files — pack_bids","text":"function works : Creating temporary copy BIDS project structure Replacing .nii .nii.gz files 0-byte stub files Preserving files (JSON, TSV, TXT, etc.) full content Creating compressed archive modified structure allows researchers share BIDS dataset structure metadata without large imaging files, useful : Sharing dataset organization metadata review Creating lightweight references dataset structure Testing BIDS tools without full datasets","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/pack_bids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pack BIDS Project with Stub or Downsampled Imaging Files — pack_bids","text":"","code":"# \\donttest{ # Create a BIDS project and pack it tryCatch({   ds_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds_path)      # Pack with default settings (tar.gz with stub files)   archive_path <- pack_bids(proj)      # Pack with downsampling (4x reduction)   archive_downsampled <- pack_bids(proj,                                     downsample_factor = 0.25,                                    output_file = \"ds001_low4x.tar.gz\")      # Pack with downsampling using parallel processing   if (requireNamespace(\"future\", quietly = TRUE)) {     archive_parallel <- pack_bids(proj,                                   downsample_factor = 0.5,                                  ncores = 2,                                  output_file = \"ds001_low2x.tar.gz\")   }      # Pack as zip file   zip_path <- pack_bids(proj, output_file = \"ds001_metadata.zip\")      # Pack without derivatives   archive_no_deriv <- pack_bids(proj, include_derivatives = FALSE)      # Clean up   unlink(c(archive_path, archive_downsampled, zip_path, archive_no_deriv))   if (exists(\"archive_parallel\")) unlink(archive_parallel)   unlink(ds_path, recursive = TRUE) }, error = function(e) {   message(\"Example failed: \", e$message) }) #> Example failed: could not find function \"pack_bids\" # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/parse-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a file-name into BIDS components — parse","title":"Parse a file-name into BIDS components — parse","text":"generic function parses BIDS filename component parts. uses parser combinator approach match filename known BIDS patterns extract relevant metadata subject ID, session, task, run, modality.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/parse-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a file-name into BIDS components — parse","text":"","code":"parse(x, fname, ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/parse-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a file-name into BIDS components — parse","text":"x parser object use parsing fname string (filename) parse ... extra args passed methods","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/parse-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a file-name into BIDS components — parse","text":"parsed representation BIDS filename, typically list extracted components","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/parse-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a file-name into BIDS components — parse","text":"","code":"# Parse an anatomical file parser <- anat_parser() parse(parser, \"sub-01_T1w.nii.gz\") #> $result #> $result$subid #> [1] \"01\" #>  #> $result$kind #> [1] \"T1w\" #>  #> $result$suffix #> [1] \"nii.gz\" #>  #> $result$type #> [1] \"anat\" #>  #>  #> $remaining #> [1] \"\" #>   # Parse a functional file parser <- func_parser() parse(parser, \"sub-01_task-rest_run-01_bold.nii.gz\") #> $result #> $result$subid #> [1] \"01\" #>  #> $result$task #> [1] \"rest\" #>  #> $result$run #> [1] \"01\" #>  #> $result$kind #> [1] \"bold\" #>  #> $result$suffix #> [1] \"nii.gz\" #>  #> $result$type #> [1] \"func\" #>  #>  #> $remaining #> [1] \"\" #>   # Use the generic BIDS parser parser <- bids_parser() parse(parser, \"sub-01_ses-pre_task-rest_run-01_bold.nii.gz\") #> $result #> $result$subid #> [1] \"01\" #>  #> $result$session #> [1] \"pre\" #>  #> $result$task #> [1] \"rest\" #>  #> $result$run #> [1] \"01\" #>  #> $result$kind #> [1] \"bold\" #>  #> $result$suffix #> [1] \"nii.gz\" #>  #> $result$type #> [1] \"funcprep\" #>  #>  #> $remaining #> [1] \"\" #>"},{"path":"https://bbuchsbaum.github.io/bidser/reference/parse_with_regex.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a BIDS filename using regex — parse_with_regex","title":"Parse a BIDS filename using regex — parse_with_regex","text":"Parse BIDS filename using regex","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/parse_with_regex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a BIDS filename using regex — parse_with_regex","text":"","code":"parse_with_regex(filename, spec)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/parse_with_regex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a BIDS filename using regex — parse_with_regex","text":"filename filename parse spec specification object","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/parse_with_regex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a BIDS filename using regex — parse_with_regex","text":"list parsed components NULL match","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/participants-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get participants from a BIDS project — participants","title":"Get participants from a BIDS project — participants","text":"function retrieves vector unique participant IDs BIDS project. extracts subject identifiers project's data table, filtering NA values. Participant IDs BIDS typically follow format 'sub-XX'.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/participants-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get participants from a BIDS project — participants","text":"","code":"participants(x, ...)  # S3 method for class 'bids_project' participants(x, ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/participants-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get participants from a BIDS project — participants","text":"x bids_project object ... extra args passed methods","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/participants-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get participants from a BIDS project — participants","text":"character vector unique participant IDs found BIDS project. participants found 'subid' column exist project's data table, returns empty character vector.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/participants-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get participants from a BIDS project — participants","text":"","code":"# \\donttest{ # Get participants from a BIDS project tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)   participants(proj)      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/participants.mock_bids_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Participants from Mock BIDS Project — participants.mock_bids_project","title":"Get Participants from Mock BIDS Project — participants.mock_bids_project","text":"Extracts unique participant IDs mock project definition. Note: Returns IDs without \"sub-\" prefix consistency bids_project methods.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/participants.mock_bids_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Participants from Mock BIDS Project — participants.mock_bids_project","text":"","code":"# S3 method for class 'mock_bids_project' participants(x, ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/participants.mock_bids_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Participants from Mock BIDS Project — participants.mock_bids_project","text":"x mock_bids_project object. ... Extra arguments (ignored).","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/participants.mock_bids_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Participants from Mock BIDS Project — participants.mock_bids_project","text":"Character vector unique participant IDs (e.g., c(\"01\", \"02\")), sorted.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/participants.mock_bids_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Participants from Mock BIDS Project — participants.mock_bids_project","text":"","code":"# Create a mock project parts <- data.frame(participant_id = c(\"sub-01\", \"sub-02\")) fs <- data.frame(subid=c(\"01\", \"02\"), datatype=\"func\", suffix=\"bold.nii.gz\", fmriprep=FALSE) mock_proj <- create_mock_bids(\"SimpleMock\", parts, fs) #> Warning: Encoding failed for: sub-01_bold.nii.gz - skipping this file in mock tree. #> Warning: Encoding failed for: sub-02_bold.nii.gz - skipping this file in mock tree.  # Get participant IDs participants(mock_proj) #> [1] \"01\" \"02\""},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot.bids_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a BIDS project as a dendrogram — plot.bids_project","title":"Plot a BIDS project as a dendrogram — plot.bids_project","text":"method visualises hierarchical file structure BIDS project. tree converted dendrogram drawn using base graphics. Large projects can trimmed setting maximum depth.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot.bids_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a BIDS project as a dendrogram — plot.bids_project","text":"","code":"# S3 method for class 'bids_project' plot(x, max_depth = Inf, ...)  # S3 method for class 'mock_bids_project' plot(x, max_depth = Inf, ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot.bids_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a BIDS project as a dendrogram — plot.bids_project","text":"x bids_project object. max_depth Maximum depth tree display. Defaults Inf full hierarchy shown. ... Additional arguments passed graphics::plot.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot.bids_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a BIDS project as a dendrogram — plot.bids_project","text":"input object x returned invisibly.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot.bids_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a BIDS project as a dendrogram — plot.bids_project","text":"","code":"# \\donttest{ tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)   plot(proj)      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) #>                                                                levelName #> 1   bids_example_ds001                                                   #> 2    °--raw                                                              #> 3        ¦--sub-01                                                       #> 4        ¦   ¦--anat                                                     #> 5        ¦   ¦   ¦--sub-01_T1w.nii.gz                                    #> 6        ¦   ¦   °--sub-01_inplaneT2.nii.gz                              #> 7        ¦   °--func                                                     #> 8        ¦       ¦--sub-01_task-balloonanalogrisktask_run-01_bold.nii.gz #> 9        ¦       ¦--sub-01_task-balloonanalogrisktask_run-01_events.tsv  #> 10       ¦       ¦--sub-01_task-balloonanalogrisktask_run-02_bold.nii.gz #> 11       ¦       ¦--sub-01_task-balloonanalogrisktask_run-02_events.tsv  #> 12       ¦       ¦--sub-01_task-balloonanalogrisktask_run-03_bold.nii.gz #> 13       ¦       °--sub-01_task-balloonanalogrisktask_run-03_events.tsv  #> 14       ¦--sub-02                                                       #> 15       ¦   ¦--anat                                                     #> 16       ¦   ¦   ¦--sub-02_T1w.nii.gz                                    #> 17       ¦   ¦   °--sub-02_inplaneT2.nii.gz                              #> 18       ¦   °--func                                                     #> 19       ¦       ¦--sub-02_task-balloonanalogrisktask_run-01_bold.nii.gz #> 20       ¦       ¦--sub-02_task-balloonanalogrisktask_run-01_events.tsv  #> 21       ¦       ¦--sub-02_task-balloonanalogrisktask_run-02_bold.nii.gz #> 22       ¦       ¦--sub-02_task-balloonanalogrisktask_run-02_events.tsv  #> 23       ¦       ¦--sub-02_task-balloonanalogrisktask_run-03_bold.nii.gz #> 24       ¦       °--sub-02_task-balloonanalogrisktask_run-03_events.tsv  #> 25       ¦--sub-03                                                       #> 26       ¦   ¦--anat                                                     #> 27       ¦   ¦   ¦--sub-03_T1w.nii.gz                                    #> 28       ¦   ¦   °--sub-03_inplaneT2.nii.gz                              #> 29       ¦   °--func                                                     #> 30       ¦       ¦--sub-03_task-balloonanalogrisktask_run-01_bold.nii.gz #> 31       ¦       ¦--sub-03_task-balloonanalogrisktask_run-01_events.tsv  #> 32       ¦       ¦--sub-03_task-balloonanalogrisktask_run-02_bold.nii.gz #> 33       ¦       ¦--sub-03_task-balloonanalogrisktask_run-02_events.tsv  #> 34       ¦       ¦--sub-03_task-balloonanalogrisktask_run-03_bold.nii.gz #> 35       ¦       °--sub-03_task-balloonanalogrisktask_run-03_events.tsv  #> 36       ¦--sub-04                                                       #> 37       ¦   ¦--anat                                                     #> 38       ¦   ¦   ¦--sub-04_T1w.nii.gz                                    #> 39       ¦   ¦   °--sub-04_inplaneT2.nii.gz                              #> 40       ¦   °--func                                                     #> 41       ¦       ¦--sub-04_task-balloonanalogrisktask_run-01_bold.nii.gz #> 42       ¦       ¦--sub-04_task-balloonanalogrisktask_run-01_events.tsv  #> 43       ¦       ¦--sub-04_task-balloonanalogrisktask_run-02_bold.nii.gz #> 44       ¦       ¦--sub-04_task-balloonanalogrisktask_run-02_events.tsv  #> 45       ¦       ¦--sub-04_task-balloonanalogrisktask_run-03_bold.nii.gz #> 46       ¦       °--sub-04_task-balloonanalogrisktask_run-03_events.tsv  #> 47       ¦--sub-05                                                       #> 48       ¦   ¦--anat                                                     #> 49       ¦   ¦   ¦--sub-05_T1w.nii.gz                                    #> 50       ¦   ¦   °--sub-05_inplaneT2.nii.gz                              #> 51       ¦   °--func                                                     #> 52       ¦       ¦--sub-05_task-balloonanalogrisktask_run-01_bold.nii.gz #> 53       ¦       ¦--sub-05_task-balloonanalogrisktask_run-01_events.tsv  #> 54       ¦       ¦--sub-05_task-balloonanalogrisktask_run-02_bold.nii.gz #> 55       ¦       ¦--sub-05_task-balloonanalogrisktask_run-02_events.tsv  #> 56       ¦       ¦--sub-05_task-balloonanalogrisktask_run-03_bold.nii.gz #> 57       ¦       °--sub-05_task-balloonanalogrisktask_run-03_events.tsv  #> 58       ¦--sub-06                                                       #> 59       ¦   ¦--anat                                                     #> 60       ¦   ¦   ¦--sub-06_T1w.nii.gz                                    #> 61       ¦   ¦   °--sub-06_inplaneT2.nii.gz                              #> 62       ¦   °--func                                                     #> 63       ¦       ¦--sub-06_task-balloonanalogrisktask_run-01_bold.nii.gz #> 64       ¦       ¦--sub-06_task-balloonanalogrisktask_run-01_events.tsv  #> 65       ¦       ¦--sub-06_task-balloonanalogrisktask_run-02_bold.nii.gz #> 66       ¦       ¦--sub-06_task-balloonanalogrisktask_run-02_events.tsv  #> 67       ¦       ¦--sub-06_task-balloonanalogrisktask_run-03_bold.nii.gz #> 68       ¦       °--sub-06_task-balloonanalogrisktask_run-03_events.tsv  #> 69       ¦--sub-07                                                       #> 70       ¦   ¦--anat                                                     #> 71       ¦   ¦   ¦--sub-07_T1w.nii.gz                                    #> 72       ¦   ¦   °--sub-07_inplaneT2.nii.gz                              #> 73       ¦   °--func                                                     #> 74       ¦       ¦--sub-07_task-balloonanalogrisktask_run-01_bold.nii.gz #> 75       ¦       ¦--sub-07_task-balloonanalogrisktask_run-01_events.tsv  #> 76       ¦       ¦--sub-07_task-balloonanalogrisktask_run-02_bold.nii.gz #> 77       ¦       ¦--sub-07_task-balloonanalogrisktask_run-02_events.tsv  #> 78       ¦       ¦--sub-07_task-balloonanalogrisktask_run-03_bold.nii.gz #> 79       ¦       °--sub-07_task-balloonanalogrisktask_run-03_events.tsv  #> 80       ¦--sub-08                                                       #> 81       ¦   ¦--anat                                                     #> 82       ¦   ¦   ¦--sub-08_T1w.nii.gz                                    #> 83       ¦   ¦   °--sub-08_inplaneT2.nii.gz                              #> 84       ¦   °--func                                                     #> 85       ¦       ¦--sub-08_task-balloonanalogrisktask_run-01_bold.nii.gz #> 86       ¦       ¦--sub-08_task-balloonanalogrisktask_run-01_events.tsv  #> 87       ¦       ¦--sub-08_task-balloonanalogrisktask_run-02_bold.nii.gz #> 88       ¦       ¦--sub-08_task-balloonanalogrisktask_run-02_events.tsv  #> 89       ¦       ¦--sub-08_task-balloonanalogrisktask_run-03_bold.nii.gz #> 90       ¦       °--sub-08_task-balloonanalogrisktask_run-03_events.tsv  #> 91       ¦--sub-09                                                       #> 92       ¦   ¦--anat                                                     #> 93       ¦   ¦   ¦--sub-09_T1w.nii.gz                                    #> 94       ¦   ¦   °--sub-09_inplaneT2.nii.gz                              #> 95       ¦   °--func                                                     #> 96       ¦       ¦--sub-09_task-balloonanalogrisktask_run-01_bold.nii.gz #> 97       ¦       ¦--sub-09_task-balloonanalogrisktask_run-01_events.tsv  #> 98       ¦       ¦--sub-09_task-balloonanalogrisktask_run-02_bold.nii.gz #> 99       ¦       ¦--sub-09_task-balloonanalogrisktask_run-02_events.tsv  #> 100      ¦       °--... 2 nodes w/ 0 sub                                 #> 101      °--... 7 nodes w/ 72 sub                                        # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a comprehensive visual overview of a BIDS project — plot_bids","title":"Plot a comprehensive visual overview of a BIDS project — plot_bids","text":"function creates multi-panel visualization BIDS project structure, showing file distributions, completeness, data characteristics.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a comprehensive visual overview of a BIDS project — plot_bids","text":"","code":"plot_bids(   x,   interactive = TRUE,   color_scheme = \"viridis\",   include_derivatives = TRUE,   file_size_scale = \"log\",   highlight_missing = TRUE,   visualization_mode = \"standard\",   debug = FALSE )"},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a comprehensive visual overview of a BIDS project — plot_bids","text":"x bids_project object interactive Logical. Whether create interactive plot (default TRUE) color_scheme Character. Name color palette use (default \"viridis\") include_derivatives Logical. Whether include derivatives data visualization (default TRUE) file_size_scale Character. Whether scale file sizes (\"log\", \"sqrt\", \"linear\", default \"log\") highlight_missing Logical. Whether highlight missing data points (default TRUE) visualization_mode Character. mode visualization use (\"standard\", \"heatmap\", \"complete\") debug Logical. Whether print debugging information (default FALSE)","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a comprehensive visual overview of a BIDS project — plot_bids","text":"plot object (ggplot2, plotly, depending settings)","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a comprehensive visual overview of a BIDS project — plot_bids","text":"","code":"# \\donttest{ # Create a basic BIDS project and plot it tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)   plot_bids(proj)      # Create an interactive plot   plot_bids(proj, interactive=TRUE)      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids_completeness.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot BIDS data completeness — plot_bids_completeness","title":"Plot BIDS data completeness — plot_bids_completeness","text":"Creates heatmap showing data completeness across subjects tasks.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids_completeness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot BIDS data completeness — plot_bids_completeness","text":"","code":"plot_bids_completeness(data, color_scheme = \"viridis\")"},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids_completeness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot BIDS data completeness — plot_bids_completeness","text":"data Preprocessed BIDS data prepare_bids_data_for_plot color_scheme Color scheme use","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids_completeness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot BIDS data completeness — plot_bids_completeness","text":"ggplot object","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids_file_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot BIDS file size distribution — plot_bids_file_sizes","title":"Plot BIDS file size distribution — plot_bids_file_sizes","text":"Creates plot showing distribution file sizes across types.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids_file_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot BIDS file size distribution — plot_bids_file_sizes","text":"","code":"plot_bids_file_sizes(data, color_scheme = \"viridis\", scale = \"log\")"},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids_file_sizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot BIDS file size distribution — plot_bids_file_sizes","text":"data Preprocessed BIDS data prepare_bids_data_for_plot color_scheme Color scheme use scale Scale use file sizes (\"log\", \"sqrt\", \"linear\")","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids_file_sizes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot BIDS file size distribution — plot_bids_file_sizes","text":"ggplot object","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot BIDS data as a heatmap — plot_bids_heatmap","title":"Plot BIDS data as a heatmap — plot_bids_heatmap","text":"Plot BIDS data heatmap","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot BIDS data as a heatmap — plot_bids_heatmap","text":"","code":"plot_bids_heatmap(data, color_scheme = \"viridis\", highlight_missing = TRUE)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot BIDS data as a heatmap — plot_bids_heatmap","text":"data Preprocessed BIDS data prepare_bids_data_for_plot color_scheme Color scheme use highlight_missing Whether highlight missing data","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot BIDS data as a heatmap — plot_bids_heatmap","text":"ggplot object","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids_tasks.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot BIDS task distribution — plot_bids_tasks","title":"Plot BIDS task distribution — plot_bids_tasks","text":"Creates plot showing distribution tasks across subjects.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids_tasks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot BIDS task distribution — plot_bids_tasks","text":"","code":"plot_bids_tasks(data, color_scheme = \"viridis\")"},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids_tasks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot BIDS task distribution — plot_bids_tasks","text":"data Preprocessed BIDS data prepare_bids_data_for_plot color_scheme Color scheme use","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/plot_bids_tasks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot BIDS task distribution — plot_bids_tasks","text":"ggplot object","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/prepare_bids_data_for_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare BIDS data for visualization — prepare_bids_data_for_plot","title":"Prepare BIDS data for visualization — prepare_bids_data_for_plot","text":"internal function processes bids_project object extracts necessary data visualization, including project info formatted data.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/prepare_bids_data_for_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare BIDS data for visualization — prepare_bids_data_for_plot","text":"","code":"prepare_bids_data_for_plot(x, include_derivatives = TRUE)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/prepare_bids_data_for_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare BIDS data for visualization — prepare_bids_data_for_plot","text":"x bids_project object include_derivatives Logical. Whether include derivatives data","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/prepare_bids_data_for_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare BIDS data for visualization — prepare_bids_data_for_plot","text":"list containing project info formatted data","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/preproc_scans-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get preprocessed functional MRI scans — preproc_scans","title":"Get preprocessed functional MRI scans — preproc_scans","text":"function retrieves paths preprocessed functional MRI scans BIDS project. searches files fMRIPrep derivatives directory match specified criteria, subject ID, task, run, BIDS metadata. Preprocessed scans identified either 'desc-preproc' 'kind-preproc' filename.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/preproc_scans-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get preprocessed functional MRI scans — preproc_scans","text":"","code":"preproc_scans(   x,   subid = \".*\",   task = \".*\",   run = \".*\",   session = \".*\",   variant = NULL,   space = \".*\",   modality = \"bold\",   kind = \".*\",   full_path = FALSE,   ... )"},{"path":"https://bbuchsbaum.github.io/bidser/reference/preproc_scans-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get preprocessed functional MRI scans — preproc_scans","text":"x bids_project object subid Subject ID regex match specific subjects (default: \".*\" subjects) task Task regex match specific tasks (default: \".*\" tasks) run Run regex match specific runs (default: \".*\" runs) session Session regex match specific sessions (default: \".*\" sessions) variant Preprocessing variant match (default: NULL, matches files without variant) space Space regex match specific spaces (default: \".*\" spaces) modality Image modality match (default: \"bold\" functional MRI) kind Kind regex match specific kinds (default: \".*\" kinds) full_path TRUE, return full file paths; FALSE, return paths relative project root (default: FALSE) ... Additional arguments passed internal functions","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/preproc_scans-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get preprocessed functional MRI scans — preproc_scans","text":"character vector file paths preprocessed functional scans matching criteria. matching files found, returns NULL.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/preproc_scans-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get preprocessed functional MRI scans — preproc_scans","text":"","code":"# Get all preprocessed scans from a BIDS project with fMRIPrep derivatives # \\donttest{ # Download and load a BIDS project with fMRIPrep derivatives tryCatch({   ds001_deriv_path <- get_example_bids_dataset(\"ds000001-fmriprep\")   proj <- bids_project(ds001_deriv_path, fmriprep=TRUE)      # Get all preprocessed scans   scans <- preproc_scans(proj)      # Get preprocessed scans for a specific subject   if (!is.null(scans) && length(scans) > 0) {     sub01_scans <- preproc_scans(proj, subid=\"01\")   }      # Clean up   unlink(ds001_deriv_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires derivatives dataset: \", e$message) }) #> Example requires derivatives dataset: participants.tsv is missing # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/preproc_scans.bids_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Get preprocessed scans from a BIDS project — preproc_scans.bids_project","title":"Get preprocessed scans from a BIDS project — preproc_scans.bids_project","text":"function retrieves paths preprocessed functional MRI scans BIDS project's fMRIPrep derivatives. allows filtering various BIDS entities subject, task, run, session, space. function particularly useful accessing preprocessed data analysis pipelines.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/preproc_scans.bids_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get preprocessed scans from a BIDS project — preproc_scans.bids_project","text":"","code":"# S3 method for class 'bids_project' preproc_scans(   x,   subid = \".*\",   task = \".*\",   run = \".*\",   session = \".*\",   variant = NULL,   space = \".*\",   modality = \"bold\",   kind = \".*\",   full_path = FALSE,   ... )"},{"path":"https://bbuchsbaum.github.io/bidser/reference/preproc_scans.bids_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get preprocessed scans from a BIDS project — preproc_scans.bids_project","text":"x bids_project object. subid regex pattern matching subjects. Default \".*\". task regex pattern matching tasks. Default \".*\". run regex pattern matching runs. Default \".*\". session regex pattern matching sessions. Default \".*\". variant regex pattern matching preprocessing variants. Default NULL (variant filtering). space regex pattern matching spaces (e.g., \"MNI152NLin2009cAsym\"). Default \".*\". modality regex pattern matching modality. Default \"bold\". Set something else need different modality. kind kind preprocessed data return. Default \".*\" match kind. full_path TRUE, return full file paths. Otherwise return relative paths. Default FALSE. ... Additional arguments passed internal functions.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/preproc_scans.bids_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get preprocessed scans from a BIDS project — preproc_scans.bids_project","text":"character vector file paths preprocessed scans matching criteria. Returns NULL : matching files found project fMRIPrep derivatives specified criteria match files","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/preproc_scans.bids_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get preprocessed scans from a BIDS project — preproc_scans.bids_project","text":"","code":"# \\donttest{ # Create a BIDS project with fMRIPrep derivatives tryCatch({   ds_path <- get_example_bids_dataset(\"phoneme_stripped\")   proj <- bids_project(ds_path, fmriprep=TRUE)      # Get all preprocessed BOLD scans   all_scans <- preproc_scans(proj)      # Get preprocessed scans for specific subjects   sub_scans <- preproc_scans(proj, subid=\"0[12]\")      # Get scans in MNI space   mni_scans <- preproc_scans(proj, space=\"MNI152NLin2009cAsym\")      # Get scans for a specific task with full paths   task_scans <- preproc_scans(proj,                              task=\"phoneme\",                              full_path=TRUE)      # Get scans from a specific session   session_scans <- preproc_scans(proj, session=\"test\")      # Combine multiple filters   filtered_scans <- preproc_scans(proj,                                  subid=\"01\",                                  task=\"phoneme\",                                  run=\"01\",                                  space=\"MNI152NLin2009cAsym\")      # Clean up   unlink(ds_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) #> Example requires internet connection: Failed to download BIDS example data: Dataset 'phoneme_stripped' not found in BIDS examples # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/print.mock_bids_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Mock BIDS Project Summary — print.mock_bids_project","title":"Print Mock BIDS Project Summary — print.mock_bids_project","text":"Provides console summary mock BIDS project, displaying key information like participant count, tasks, sessions, derivatives status, discovered BIDS entities.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/print.mock_bids_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Mock BIDS Project Summary — print.mock_bids_project","text":"","code":"# S3 method for class 'mock_bids_project' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/print.mock_bids_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Mock BIDS Project Summary — print.mock_bids_project","text":"x mock_bids_project object. ... Extra arguments (ignored).","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/print.mock_bids_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Mock BIDS Project Summary — print.mock_bids_project","text":"mock_bids_project object x invisibly.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/print.mock_bids_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Mock BIDS Project Summary — print.mock_bids_project","text":"","code":"# Create a simple mock project parts <- data.frame(participant_id = \"01\") fs <- data.frame(subid = \"01\", datatype=\"func\", suffix=\"bold.nii.gz\", fmriprep=FALSE) mock_proj <- create_mock_bids(\"SimpleMock\", parts, fs) #> Warning: Encoding failed for: sub-01_bold.nii.gz - skipping this file in mock tree.  # Print the summary print(mock_proj) #> Mock BIDS Project Summary  #> Project Name:  SimpleMock  #> Participants (n):  1  #> Tasks:  (none)  #> Datatypes:  (none)  #> Suffixes:  (none)  #> BIDS Keys:  (none)  #> Path:  mock://SimpleMock"},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_confounds.bids_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Read confound files — read_confounds.bids_project","title":"Read confound files — read_confounds.bids_project","text":"Reads fmriprep confound tables one subjects.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_confounds.bids_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read confound files — read_confounds.bids_project","text":"","code":"# S3 method for class 'bids_project' read_confounds(   x,   subid = \".*\",   task = \".*\",   session = \".*\",   run = \".*\",   cvars = DEFAULT_CVARS,   npcs = -1,   perc_var = -1,   nest = TRUE,   ... )"},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_confounds.bids_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read confound files — read_confounds.bids_project","text":"x bids_project object subid Subject ID regex task Task regex session Session regex run Run regex. run identifier extracted filename, run value defaults \"1\". cvars names confound variables select. Defaults DEFAULT_CVARS. Canonical names \"csf\" automatically mapped matching column names found dataset using CVARS_ALIASES. npcs Perform PCA reduction confounds return npcs PCs. perc_var Perform PCA reduction retain perc_var% variance. nest TRUE, nests confound tables subject/session/run. ... Additional arguments (currently used)","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_confounds.bids_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read confound files — read_confounds.bids_project","text":"nested tibble (nest=TRUE) flat tibble (nest=FALSE) confounds.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_confounds.bids_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read confound files — read_confounds.bids_project","text":"","code":"# \\donttest{ # Try to load a BIDS project with fMRIPrep derivatives tryCatch({   ds_path <- get_example_bids_dataset(\"ds000001-fmriprep\")   proj <- bids_project(ds_path, fmriprep=TRUE)      # Read confounds with canonical names (automatically resolve to actual columns)   conf <- read_confounds(proj, cvars = c(\"csf\", \"framewise_displacement\"))      # Read confounds for specific subjects and tasks   conf_sub <- read_confounds(proj, subid=\"01\", task=\"balloonanalogrisktask\")      # Get confounds as flat tibble   conf_flat <- read_confounds(proj, nest=FALSE)      # Clean up   unlink(ds_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires derivatives dataset with confounds: \", e$message) }) #> Example requires derivatives dataset with confounds: participants.tsv is missing # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_confounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Confound Files from a BIDS Project — read_confounds","title":"Read Confound Files from a BIDS Project — read_confounds","text":"function reads fMRIPrep confound tables one subjects BIDS project. Confound files contain nuisance variables can used denoising fMRI data, motion parameters, physiological signals, noise components. function can optionally perform PCA reduction confounds return either nested flat tibbles.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_confounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Confound Files from a BIDS Project — read_confounds","text":"","code":"read_confounds(x, ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_confounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Confound Files from a BIDS Project — read_confounds","text":"x object read confounds (typically bids_project). ... Additional arguments passed methods, including: subid: Regex match subject IDs (default: \".*\") task: Regex match tasks (default: \".*\") session: Regex match sessions (default: \".*\") run: Regex match runs (default: \".*\") cvars: Character vector confound variable names select npcs: Integer. Perform PCA reduction return many PCs perc_var: Numeric. Perform PCA reduction retain percentage variance nest: Logical. TRUE, nests confound tables subject/session/run (default: TRUE)","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_confounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Confound Files from a BIDS Project — read_confounds","text":"tibble containing confound data. nest=TRUE (default), returns nested tibble columns subject, session, run, nested data column containing confound variables. nest=FALSE, returns flat tibble confound variables. Returns NULL matching files found.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_confounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Confound Files from a BIDS Project — read_confounds","text":"","code":"# \\donttest{ # Create a BIDS project with fMRIPrep derivatives tryCatch({   ds_path <- get_example_bids_dataset(\"ds000001-fmriprep\")   proj <- bids_project(ds_path, fmriprep=TRUE)      # Read all confound files   all_conf <- read_confounds(proj)      # Read confounds for specific subjects and tasks   sub_conf <- read_confounds(proj,                             subid=\"01\",                             task=\"balloonanalogrisktask\")      # Select specific confound variables   motion_conf <- read_confounds(proj,                                cvars=c(\"framewise_displacement\",                                       \"trans_x\", \"trans_y\", \"trans_z\",                                       \"rot_x\", \"rot_y\", \"rot_z\"))      # Perform PCA reduction   pca_conf <- read_confounds(proj, npcs=5)      # Get confounds as a flat tibble   flat_conf <- read_confounds(proj, nest=FALSE)      # Combine multiple options   custom_conf <- read_confounds(proj,                                subid=\"01\",                                task=\"balloonanalogrisktask\",                                cvars=c(\"framewise_displacement\",                                       \"trans_x\", \"trans_y\", \"trans_z\"),                                npcs=3,                                nest=FALSE)      # Clean up   unlink(ds_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) #> Example requires internet connection: participants.tsv is missing # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_confounds.mock_bids_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Confound Files (Mock Implementation) — read_confounds.mock_bids_project","title":"Read Confound Files (Mock Implementation) — read_confounds.mock_bids_project","text":"Read Confound Files (Mock Implementation)","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_confounds.mock_bids_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Confound Files (Mock Implementation) — read_confounds.mock_bids_project","text":"","code":"# S3 method for class 'mock_bids_project' read_confounds(   x,   subid = \".*\",   task = \".*\",   session = \".*\",   run = \".*\",   cvars = NULL,   npcs = -1,   perc_var = -1,   nest = TRUE,   ... )"},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_confounds.mock_bids_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Confound Files (Mock Implementation) — read_confounds.mock_bids_project","text":"x mock_bids_project object. subid Regex pattern subject IDs. Default \".*\". task Regex pattern task names. Default \".*\". session Regex pattern session IDs. Default \".*\". run Regex pattern run indices. Default \".*\". cvars Variables select (ignored mock). npcs PCA components (ignored mock). perc_var PCA variance (ignored mock). nest TRUE, returns nested tibble keyed subject, session run. ... Additional BIDS entities (passed search_files).","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_confounds.mock_bids_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Confound Files (Mock Implementation) — read_confounds.mock_bids_project","text":"tibble confound data (nested nest = TRUE).","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_events.bids_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Read event files from a BIDS project — read_events.bids_project","title":"Read event files from a BIDS project — read_events.bids_project","text":"Reads nests event files given subjects tasks bids_project object. Returns nested tibble event data grouped task, session, run, subject. Event files typically contain trial--trial information task-based fMRI data, including onset times, durations, trial types, task-specific variables.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_events.bids_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read event files from a BIDS project — read_events.bids_project","text":"","code":"# S3 method for class 'bids_project' read_events(x, subid = \".*\", task = \".*\", run = \".*\", session = \".*\", ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_events.bids_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read event files from a BIDS project — read_events.bids_project","text":"x bids_project object. subid Regex pattern match subject IDs. Default \".*\" (subjects). task Regex pattern match tasks. Default \".*\" (tasks). run Regex pattern match runs. Default \".*\" (runs). session Regex pattern match sessions. Default \".*\" (sessions). ... Additional arguments passed event_files.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_events.bids_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read event files from a BIDS project — read_events.bids_project","text":"nested tibble columns: .task: Task name .session: Session ID (present) .run: Run number .subid: Subject ID data: nested tibble containing event data columns: onset: Event onset time seconds duration: Event duration seconds Additional task-specific columns (e.g., trial type, response, accuracy) matching data found, returns empty tibble appropriate columns. Run session identifiers parsed filenames using func_parser().","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_events.bids_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read event files from a BIDS project — read_events.bids_project","text":"","code":"# \\donttest{ # Create a BIDS project object tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)      # Read all event files   all_events <- read_events(proj)      # Read events for a specific subject and task   sub01_events <- read_events(proj,                              subid=\"01\",                              task=\"balloonanalogrisktask\")      # Read events for multiple subjects and a specific run   multi_sub_events <- read_events(proj,                                  subid=\"0[1-3]\",                                  run=\"01\")      # Access nested data for analysis   if (nrow(sub01_events) > 0) {     # Get first subject's data     first_sub_data <- sub01_events$data[[1]]          # Calculate mean trial duration     mean_duration <- mean(first_sub_data$duration)   }      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) #> Rows: 158 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 156 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 185 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 184 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 186 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 150 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 169 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 175 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 166 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 175 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 169 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 135 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 138 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 146 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 177 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 187 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 172 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 170 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 162 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 160 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 163 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 166 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 165 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 172 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 167 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 158 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 175 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 173 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 173 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 150 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 153 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 168 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 156 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 148 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 151 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 172 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 162 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 168 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 173 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 162 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 127 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 135 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 121 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 141 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 157 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 158 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 156 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 158 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 185 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 150 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Unknown or uninitialised column: `duration`. #> Warning: argument is not numeric or logical: returning NA # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Event Files from a BIDS Project — read_events","title":"Read Event Files from a BIDS Project — read_events","text":"generic function reads nests event files BIDS project. Event files contain timing information task events, conditions, responses functional MRI scans. function can filter events subject task, returns nested tibble easy data manipulation.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Event Files from a BIDS Project — read_events","text":"","code":"read_events(x, ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Event Files from a BIDS Project — read_events","text":"x object read events (typically bids_project). ... Additional arguments passed methods.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Event Files from a BIDS Project — read_events","text":"nested tibble columns: .task: Task name .run: Run number .subid: Subject ID data: Nested column containing event data matching data found, returns empty tibble appropriate columns.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Event Files from a BIDS Project — read_events","text":"","code":"# \\donttest{ # Create a BIDS project tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)      # Read all event files   all_events <- read_events(proj)      # Read events for specific subjects   sub_events <- read_events(proj, subid=\"0[123]\")      # Read events for a specific task   task_events <- read_events(proj, task=\"balloonanalogrisktask\")      # Combine multiple filters   filtered_events <- read_events(proj,                                 subid=\"01\",                                 task=\"balloonanalogrisktask\")      # Access nested data   if (nrow(filtered_events) > 0) {     first_run <- filtered_events$data[[1]]     print(head(first_run))   }      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) #> Rows: 158 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 156 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 185 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 184 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 186 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 150 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 169 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 175 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 166 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 175 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 169 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 135 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 138 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 146 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 177 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 187 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 172 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 170 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 162 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 160 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 163 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 166 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 165 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 172 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 167 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 158 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 175 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 173 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 173 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 150 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 153 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 168 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 156 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 148 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 151 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 172 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 162 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 168 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 173 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 162 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 127 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 135 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 121 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 141 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 157 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 158 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 156 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 185 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 184 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 186 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 150 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 169 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 175 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 158 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 156 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 185 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 184 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 186 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 150 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 169 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 175 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 166 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 175 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 169 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 135 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 138 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 146 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 177 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 187 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 172 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 170 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 162 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 160 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 163 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 166 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 165 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 172 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 167 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 158 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 175 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 173 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 173 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 150 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 153 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 168 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 156 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 148 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 151 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 172 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 162 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 168 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 173 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 162 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 127 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 135 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 121 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 141 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 157 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 158 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 156 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 149 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \" \" #> chr (1): onset\tduration\ttrial_type\tcash_demean\tcontrol_pumps_demean\texplode_... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 6 × 2 #>   onset\\tduration\\ttrial_type\\tcash_demean\\tcontrol_pumps_demean\\texplod…¹ .file #>   <chr>                                                                    <chr> #> 1 \"0.061\\t0.772\\tpumps_demean\\tn/a\\tn/a\\tn/a\\t-2.000\\t2.420\"               /tmp… #> 2 \"4.958\\t0.772\\tpumps_demean\\tn/a\\tn/a\\tn/a\\t-1.000\\t0.578\"               /tmp… #> 3 \"7.179\\t0.772\\tpumps_demean\\tn/a\\tn/a\\tn/a\\t0.000\\t0.766\"                /tmp… #> 4 \"10.416\\t0.772\\tpumps_demean\\tn/a\\tn/a\\tn/a\\t1.000\\t0.840\"               /tmp… #> 5 \"13.419\\t0.772\\tpumps_demean\\tn/a\\tn/a\\tn/a\\t2.000\\t1.462\"               /tmp… #> 6 \"16.754\\t0.772\\texplode_demean\\tn/a\\tn/a\\t1.700\\tn/a\\tn/a\"               /tmp… #> # ℹ abbreviated name: #> #   ¹​`onset\\tduration\\ttrial_type\\tcash_demean\\tcontrol_pumps_demean\\texplode_demean\\tpumps_demean\\tresponse_time` # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_events.mock_bids_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Event Files from Mock BIDS Project — read_events.mock_bids_project","title":"Read Event Files from Mock BIDS Project — read_events.mock_bids_project","text":"Retrieves formats event data stored within mock project object.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_events.mock_bids_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Event Files from Mock BIDS Project — read_events.mock_bids_project","text":"","code":"# S3 method for class 'mock_bids_project' read_events(x, subid = \".*\", task = \".*\", run = \".*\", session = \".*\", ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_events.mock_bids_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Event Files from Mock BIDS Project — read_events.mock_bids_project","text":"x mock_bids_project object. subid Regex pattern subject IDs. Default \".*\". task Regex pattern task names. Default \".*\". run Regex pattern run indices. Default \".*\". session Regex pattern session IDs. Default \".*\". ... Additional arguments passed event_files.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_events.mock_bids_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Event Files from Mock BIDS Project — read_events.mock_bids_project","text":"nested tibble columns .subid, .task, .run, .session (applicable), data (containing event tibbles), empty tibble matching data.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_func_scans.bids_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in a set of four-dimensional functional scans — read_func_scans.bids_project","title":"Read in a set of four-dimensional functional scans — read_func_scans.bids_project","text":"Read set four-dimensional functional scans","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_func_scans.bids_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in a set of four-dimensional functional scans — read_func_scans.bids_project","text":"","code":"read_func_scans.bids_project(   x,   mask,   mode = c(\"normal\", \"bigvec\"),   subid = \"^sub-.*\",   task = \".*\",   run = \".*\",   modality = \"bold\",   ... )"},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_func_scans.bids_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in a set of four-dimensional functional scans — read_func_scans.bids_project","text":"x bids_project object mask brain mask type LogicalNeuroVol mode file mode: 'normal' -memory files 'bigvec' -disk files subid One subject IDs (regex) task optional task regex run optional run regex modality image modality (usually \"bold\") ... Extra arguments passed neuroim2::read_vec","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_func_scans.bids_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in a set of four-dimensional functional scans — read_func_scans.bids_project","text":"instance type NeuroVec","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_preproc_scans.bids_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Read preprocessed functional MRI scans from a BIDS project — read_preproc_scans.bids_project","title":"Read preprocessed functional MRI scans from a BIDS project — read_preproc_scans.bids_project","text":"function reads preprocessed functional MRI scans BIDS project's fMRIPrep derivatives directory. uses preproc_scans function locate files reads NeuroVec object using neuroim2 package. mask provided, one automatically created available brainmask files.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_preproc_scans.bids_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read preprocessed functional MRI scans from a BIDS project — read_preproc_scans.bids_project","text":"","code":"read_preproc_scans.bids_project(   x,   mask = NULL,   mode = c(\"normal\", \"bigvec\"),   subid = \"^sub-.*\",   task = \".*\",   run = \".*\",   modality = \"bold\",   ... )"},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_preproc_scans.bids_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read preprocessed functional MRI scans from a BIDS project — read_preproc_scans.bids_project","text":"x bids_project object fMRIPrep derivatives mask brain mask type LogicalNeuroVol, NULL (NULL, mask created automatically) mode file mode: 'normal' -memory files 'bigvec' -disk files subid Regular expression match subject IDs (default: \"^sub-.*\" match subjects) task Regular expression match tasks (default: \".*\" match tasks) run Regular expression match runs (default: \".*\" match runs) modality Image modality match (default: \"bold\" functional MRI) ... Extra arguments passed neuroim2::read_vec","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_preproc_scans.bids_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read preprocessed functional MRI scans from a BIDS project — read_preproc_scans.bids_project","text":"instance type NeuroVec containing preprocessed functional data.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_preproc_scans.bids_project.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read preprocessed functional MRI scans from a BIDS project — read_preproc_scans.bids_project","text":"function requires neuroim2 package installed. throw error package available fMRIPrep derivatives found BIDS project. mask provided, create one using create_preproc_mask function.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_preproc_scans.bids_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read preprocessed functional MRI scans from a BIDS project — read_preproc_scans.bids_project","text":"","code":"# \\donttest{ # Load a BIDS project with fMRIPrep derivatives tryCatch({   ds_path <- get_example_bids_dataset(\"ds000001-fmriprep\")   proj <- bids_project(ds_path, fmriprep=TRUE)      # Read preprocessed scans for all subjects   # (mask will be created automatically)   all_scans <- read_preproc_scans(proj)      # Read preprocessed scans for a specific subject   sub01_scans <- read_preproc_scans(proj, subid=\"01\")      # Read preprocessed scans for a specific task and run   task_scans <- read_preproc_scans(proj,                                    task=\"balloonanalogrisktask\",                                   run=\"01\")      # Specify mode for large datasets   bigvec_scans <- read_preproc_scans(proj, mode=\"bigvec\")      # Provide a custom mask   mask <- create_preproc_mask(proj, thresh=0.95)   masked_scans <- read_preproc_scans(proj, mask=mask)      # Clean up   unlink(ds_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires derivatives dataset: \", e$message) }) #> Example requires derivatives dataset: participants.tsv is missing # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_sidecar.html","id":null,"dir":"Reference","previous_headings":"","what":"Read sidecar JSON files and return metadata as a tidy tibble — read_sidecar","title":"Read sidecar JSON files and return metadata as a tidy tibble — read_sidecar","text":"function searches JSON sidecar files matching given criteria (subject, task, run, session), reads JSON content, converts top-level fields columns tibble. file's metadata becomes one row returned tibble. particularly useful extracting metadata BIDS imaging files, acquisition parameters, task descriptions, relevant information.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_sidecar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read sidecar JSON files and return metadata as a tidy tibble — read_sidecar","text":"","code":"read_sidecar(   x,   subid = \".*\",   task = \".*\",   run = \".*\",   session = \".*\",   modality = \"bold\",   full_path = TRUE,   ... )"},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_sidecar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read sidecar JSON files and return metadata as a tidy tibble — read_sidecar","text":"x bids_project object. subid regex matching subject IDs. Default \".*\". task regex matching tasks. Default \".*\". run regex matching runs. Default \".*\". session regex matching sessions. Default \".*\". modality regex matching modality (e.g. \"bold\"). Default \"bold\". full_path TRUE, return full file paths file column. Default TRUE. ... Additional arguments passed search_files().","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_sidecar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read sidecar JSON files and return metadata as a tidy tibble — read_sidecar","text":"tibble one row per JSON file. Columns include: file: JSON file path .subid: subject ID extracted filename .session: session ID extracted filename (present) .task: task name extracted filename (present) .run: run number extracted filename (present) Additional columns top-level key JSON files files found, returns empty tibble.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/read_sidecar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read sidecar JSON files and return metadata as a tidy tibble — read_sidecar","text":"","code":"# \\donttest{ # Read all BOLD sidecar files from a BIDS dataset tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)   metadata <- read_sidecar(proj)      # Read sidecar files for a specific subject and task   sub01_meta <- read_sidecar(proj,                              subid=\"01\",                              task=\"balloonanalogrisktask\")      # Read sidecar files for anatomical data   anat_meta <- read_sidecar(proj,                             modality=\"T1w\",                            full_path=FALSE)      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) #> No matching JSON sidecar files found. #> No matching JSON sidecar files found. #> No matching JSON sidecar files found. # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/resolve_cvars.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve canonical confound variable names — resolve_cvars","title":"Resolve canonical confound variable names — resolve_cvars","text":"Given set desired confound variables, returns matching column names present dataset, taking account aliases across fmriprep versions.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/resolve_cvars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve canonical confound variable names — resolve_cvars","text":"","code":"resolve_cvars(cvars, col_names, rename = FALSE)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/resolve_cvars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve canonical confound variable names — resolve_cvars","text":"cvars Character vector canonical alias confound names. col_names Character vector available column names. rename TRUE, named vector returned names canonical variables values matching column names. FALSE result unnamed vector column names select.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/resolve_cvars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve canonical confound variable names — resolve_cvars","text":"Character vector resolved column names.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/search_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Search files in BIDS structure — search_files","title":"Search files in BIDS structure — search_files","text":"function searches files BIDS project match specified pattern optional key-value criteria. can used find files raw data preprocessed derivatives based filename patterns BIDS metadata. function searches files BIDS project match specified pattern optional key-value criteria. can search raw data preprocessed derivatives (available).","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/search_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search files in BIDS structure — search_files","text":"","code":"search_files(x, ...)  # S3 method for class 'bids_project' search_files(x, regex = \".*\", full_path = FALSE, strict = TRUE, ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/search_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search files in BIDS structure — search_files","text":"x bids_project object. ... Additional key-value pairs filter files (e.g., subid = \"01\", task = \"wm\"). matched corresponding metadata BIDS files. regex regular expression match filenames. Default \".*\" (files). full_path TRUE, return full file paths. FALSE, return paths relative project root. strict TRUE, require queried keys must exist matched files. FALSE, allow matches files missing queried keys.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/search_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search files in BIDS structure — search_files","text":"character vector file paths matching criteria, NULL matches found. character vector file paths matching criteria, NULL matches found.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/search_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search files in BIDS structure — search_files","text":"","code":"# \\donttest{ # Search for event files in a BIDS dataset   tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path, fmriprep=FALSE)   event_files <- search_files(proj, regex=\"events\\\\.tsv$\")      # Search with additional criteria   sub01_files <- search_files(proj, regex=\"bold\\\\.nii\\\\.gz$\", subid=\"01\",                                task=\"balloonanalogrisktask\")      # Get full paths   full_paths <- search_files(proj, regex=\"events\\\\.tsv$\", full_path=TRUE)      # Search with strict matching   strict_matches <- search_files(proj, regex=\"\\\\.tsv$\", strict=TRUE,                                   task=\"balloonanalogrisktask\")      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) # } # \\donttest{ # Search for event files in a BIDS dataset tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path, fmriprep=FALSE)   event_files <- search_files(proj, regex=\"events\\\\.tsv$\")      # Search with additional criteria (note: ds001 only has one subject '01')   sub01_files <- search_files(proj, regex=\"bold\\\\.nii\\\\.gz$\", subid=\"01\",                                task=\"balloonanalogrisktask\")      # Get full paths   full_paths <- search_files(proj, regex=\"events\\\\.tsv$\", full_path=TRUE)      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/search_files.mock_bids_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Files in Mock BIDS Structure — search_files.mock_bids_project","title":"Search Files in Mock BIDS Structure — search_files.mock_bids_project","text":"Finds files mock BIDS tree matching file names BIDS entities.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/search_files.mock_bids_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Files in Mock BIDS Structure — search_files.mock_bids_project","text":"","code":"# S3 method for class 'mock_bids_project' search_files(x, regex = \".*\", full_path = FALSE, strict = TRUE, ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/search_files.mock_bids_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Files in Mock BIDS Structure — search_files.mock_bids_project","text":"x mock_bids_project object. regex regular expression match filenames (node names). Default \".*\". full_path TRUE, return full paths (prefixed x$path). FALSE, return relative paths within BIDS structure. Default FALSE. strict TRUE (default), queries BIDS entity (e.g., task=\"X\") require entity exist file node match pattern. FALSE, files lacking queried entity automatically excluded (though match pattern .*). ... Additional BIDS entities match (e.g., subid = \"01\", task = \"rest\"). Values treated regex patterns unless simple strings without regex characters.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/search_files.mock_bids_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search Files in Mock BIDS Structure — search_files.mock_bids_project","text":"character vector matching file paths, NULL matches.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/sessions-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get sessions from a BIDS project — sessions","title":"Get sessions from a BIDS project — sessions","text":"function retrieves vector session IDs BIDS project. Sessions BIDS typically represented directories named 'ses-XX' within subject directories. function extracts returns unique session identifiers.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/sessions-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get sessions from a BIDS project — sessions","text":"","code":"sessions(x, ...)  # S3 method for class 'bids_project' sessions(x, ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/sessions-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get sessions from a BIDS project — sessions","text":"x object extract sessions ... extra args passed methods","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/sessions-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get sessions from a BIDS project — sessions","text":"character vector unique session IDs project sessions, NULL project sessions","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/sessions-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get sessions from a BIDS project — sessions","text":"","code":"# \\donttest{ # Get sessions from a BIDS project tryCatch({   ds007_path <- get_example_bids_dataset(\"ds007\")   proj <- bids_project(ds007_path)   sessions(proj)      # Clean up (disabled for performance - cached dataset)   # unlink(ds007_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) #> NULL # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/sessions.mock_bids_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Sessions from Mock BIDS Project — sessions.mock_bids_project","title":"Get Sessions from Mock BIDS Project — sessions.mock_bids_project","text":"Extracts unique session IDs found mock project's file structure. Note: Returns IDs without \"ses-\" prefix.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/sessions.mock_bids_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Sessions from Mock BIDS Project — sessions.mock_bids_project","text":"","code":"# S3 method for class 'mock_bids_project' sessions(x, ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/sessions.mock_bids_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Sessions from Mock BIDS Project — sessions.mock_bids_project","text":"x mock_bids_project object. ... Extra arguments (ignored).","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/sessions.mock_bids_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Sessions from Mock BIDS Project — sessions.mock_bids_project","text":"Character vector unique session IDs (e.g., c(\"pre\", \"post\")), sorted, NULL project sessions.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/sessions.mock_bids_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Sessions from Mock BIDS Project — sessions.mock_bids_project","text":"","code":"# Create a mock project with sessions parts <- data.frame(participant_id = \"01\") fs <- data.frame(subid=\"01\", session=\"test\", datatype=\"func\", suffix=\"bold.nii.gz\", fmriprep=FALSE) mock_proj <- create_mock_bids(\"SessionMock\", parts, fs) #> Warning: Encoding failed for: sub-01_ses-test_bold.nii.gz - skipping this file in mock tree.  # Get session IDs sessions(mock_proj) #> NULL  # Project without sessions fs_no_session <- data.frame(subid=\"01\", datatype=\"func\", suffix=\"bold.nii.gz\", fmriprep=FALSE) mock_proj_no_sess <- create_mock_bids(\"NoSessionMock\", parts, fs_no_session) #> Warning: Encoding failed for: sub-01_bold.nii.gz - skipping this file in mock tree. sessions(mock_proj_no_sess) # Returns NULL #> NULL"},{"path":"https://bbuchsbaum.github.io/bidser/reference/tasks-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get tasks from a BIDS project — tasks","title":"Get tasks from a BIDS project — tasks","text":"function retrieves sorted vector unique task names BIDS project. Tasks BIDS typically represented filenames pattern 'task-XX'. function extracts returns unique task identifiers, filtering NULL NA values.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/tasks-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get tasks from a BIDS project — tasks","text":"","code":"tasks(x, ...)  # S3 method for class 'bids_project' tasks(x, ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/tasks-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get tasks from a BIDS project — tasks","text":"x object extract tasks ... extra args passed methods","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/tasks-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get tasks from a BIDS project — tasks","text":"character vector unique, sorted task names found BIDS project","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/tasks-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get tasks from a BIDS project — tasks","text":"","code":"# \\donttest{ # Get tasks from a BIDS project tryCatch({   ds001_path <- get_example_bids_dataset(\"ds001\")   proj <- bids_project(ds001_path)   tasks(proj)      # Clean up   unlink(ds001_path, recursive=TRUE) }, error = function(e) {   message(\"Example requires internet connection: \", e$message) }) # }"},{"path":"https://bbuchsbaum.github.io/bidser/reference/tasks.mock_bids_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Tasks from Mock BIDS Project — tasks.mock_bids_project","title":"Get Tasks from Mock BIDS Project — tasks.mock_bids_project","text":"Extracts unique task names found mock project's file structure. Note: Returns names without \"task-\" prefix.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/tasks.mock_bids_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Tasks from Mock BIDS Project — tasks.mock_bids_project","text":"","code":"# S3 method for class 'mock_bids_project' tasks(x, ...)"},{"path":"https://bbuchsbaum.github.io/bidser/reference/tasks.mock_bids_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Tasks from Mock BIDS Project — tasks.mock_bids_project","text":"x mock_bids_project object. ... Extra arguments (ignored).","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/tasks.mock_bids_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Tasks from Mock BIDS Project — tasks.mock_bids_project","text":"Character vector unique task names (e.g., c(\"rest\", \"nback\")), sorted.","code":""},{"path":"https://bbuchsbaum.github.io/bidser/reference/tasks.mock_bids_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Tasks from Mock BIDS Project — tasks.mock_bids_project","text":"","code":"# Create a mock project with tasks parts <- data.frame(participant_id = \"01\") fs <- data.frame(subid=\"01\", task=\"taskA\", run=\"01\", datatype=\"func\",                   suffix=\"bold.nii.gz\", fmriprep=FALSE) fs <- rbind(fs, data.frame(subid=\"01\", task=\"taskB\", run=\"01\", datatype=\"func\",                            suffix=\"bold.nii.gz\", fmriprep=FALSE)) mock_proj <- create_mock_bids(\"TaskMock\", parts, fs)  # Get task names tasks(mock_proj) #> [1] \"taskA\" \"taskB\""}]
